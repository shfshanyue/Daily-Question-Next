1
00:00:00,533 --> 00:00:01,400
大家好我是山月

2
00:00:01,400 --> 00:00:04,533
今天面试一位大二的一位同学

3
00:00:04,533 --> 00:00:05,966
这是他的简历

4
00:00:07,333 --> 00:00:08,533
喂，你好

7
00:00:11,500 --> 00:00:13,100
我在这看到你的个人总结

8
00:00:13,100 --> 00:00:15,766
或者就是你的个人技能

9
00:00:15,766 --> 00:00:18,133
然后你在这说学过 ES6

10
00:00:18,133 --> 00:00:20,500
你的 ES6 是怎么进行学习的

11
00:00:21,933 --> 00:00:25,333
我是通过在网上那些教程学习

12
00:00:25,333 --> 00:00:28,500
首先是看了那个阮一峰的那个 ES6 的

13
00:00:29,100 --> 00:00:29,866
那个教程

14
00:00:29,866 --> 00:00:32,366
然后他写的就很全面

15
00:00:32,366 --> 00:00:33,566
然后还有一个

16
00:00:33,566 --> 00:00:36,133
是通过一个网上那个叫现代 javascript

17
00:00:36,133 --> 00:00:38,400
教程的一个这个网站

19
00:00:38,966 --> 00:00:41,200
其实是把 ES6 融合进去了

20
00:00:41,200 --> 00:00:42,600
他跟正常的普通啊

21
00:00:42,600 --> 00:00:44,466
他跟 ES5 的

22
00:00:44,466 --> 00:00:45,933
js 教程融合在一起了

23
00:00:45,933 --> 00:00:47,366
所以看的过程中

24
00:00:47,366 --> 00:00:50,200
就不知不觉的就把这个 es 6学完了对

25
00:00:50,200 --> 00:00:52,300
主要是这两个啊

26
00:00:52,300 --> 00:00:53,700
最后那个是不是 javascript.info

27
00:00:53,700 --> 00:00:55,733
那个网站

28
00:00:56,766 --> 00:00:58,066
对对对是那个是那个啊

29
00:00:58,066 --> 00:01:00,300
这个网站确实也是很出名

30
00:01:00,400 --> 00:01:03,500
但是我在上面很少看过一些嗯

31
00:01:03,500 --> 00:01:04,700
行好别谈了

32
00:01:06,266 --> 00:01:08,133
啊好那问你一个小问题

33
00:01:08,133 --> 00:01:11,533
就是如何构造100个全为0

34
00:01:12,166 --> 00:01:13,733
的一个数组

35
00:01:15,166 --> 00:01:16,666
呃可以通过 new Array

36
00:01:16,933 --> 00:01:20,000
然后 new Array

37
00:01:20,000 --> 00:01:21,966
可以构建一个数组

38
00:01:21,966 --> 00:01:23,900
然后他的参数是数组的大小

39
00:01:23,900 --> 00:01:25,200
然后再通过他的 fill

40
00:01:25,400 --> 00:01:27,766
就是在他后面把他的实力构造出来

41
00:01:27,766 --> 00:01:29,066
之后通过 fill 方法

42
00:01:29,166 --> 00:01:30,866
让他全部废物0就可以

43
00:01:33,966 --> 00:01:34,700
嗯好

44
00:01:34,700 --> 00:01:37,200
还有没有其他的方法可以做

45
00:01:38,533 --> 00:01:40,800
Array.from 我记得也是可以

46
00:01:40,800 --> 00:01:43,700
Array.from 的第二个参数也是可以通过

47
00:01:44,000 --> 00:01:46,066
呃就是第一个先构建一个参数

48
00:01:46,066 --> 00:01:48,966
然后 lfm 的第二个参数就是给每一项

49
00:01:48,966 --> 00:01:50,133
然后都变

50
00:01:50,133 --> 00:01:51,166
成一个数

51
00:01:51,166 --> 00:01:53,566
就是每一项都把它变成0就可以

52
00:01:53,933 --> 00:01:55,766
呃还有嗯

53
00:01:57,533 --> 00:01:58,500
嗯好

54
00:01:59,533 --> 00:02:02,900
嗯好应该可以这两种行好

55
00:02:02,966 --> 00:02:04,900
那如何实现一个 flat

56
00:02:07,500 --> 00:02:08,300
flat?

57
00:02:08,700 --> 00:02:10,900
对 Array.prototype.flat

58
00:02:11,766 --> 00:02:13,400
数组扁平的那个 flat 吗

59
00:02:13,400 --> 00:02:14,200
对

60
00:02:15,166 --> 00:02:19,500
对呃数 flat 可以通过就是数组

61
00:02:19,500 --> 00:02:21,466
就是 kankat 的方法就是

62
00:02:21,566 --> 00:02:23,200
呃有有两种方法吧

63
00:02:23,200 --> 00:02:24,266
一个是通过

64
00:02:24,266 --> 00:02:26,366
就如果是要实现一个 flat 的话

65
00:02:26,500 --> 00:02:27,966
可以通过循环的形式

66
00:02:28,100 --> 00:02:31,200
呃我想到的是首先在就便利这个数组

67
00:02:31,200 --> 00:02:32,533
然后通过 arr.some

68
00:02:32,933 --> 00:02:35,000
去查看这个数字里边是不是有

69
00:02:35,000 --> 00:02:37,800
就是他他 ar 的上面因为是查找一项

70
00:02:37,800 --> 00:02:40,133
如果他有一个为处他就会返回处

71
00:02:40,266 --> 00:02:43,166
然后就查找里边有没有数组

72
00:02:43,366 --> 00:02:44,500
然后就便利每一项

73
00:02:44,500 --> 00:02:45,900
查找里边有没有数组

74
00:02:45,900 --> 00:02:49,100
如果有数组的话就通过呃一个空数组

75
00:02:49,100 --> 00:02:50,000
然后 ctrl

76
00:02:50,266 --> 00:02:52,100
把里边展开的形式

77
00:02:52,266 --> 00:02:55,000
然后就就相当于把它降一层

78
00:02:55,500 --> 00:02:58,000
啊就是通过展开运算服空数组抗开的

79
00:02:58,000 --> 00:03:00,333
然后展开运算服就可以把它降一层

80
00:03:00,333 --> 00:03:01,600
然后就这样一直循环

81
00:03:01,600 --> 00:03:03,700
一直循环到里边没有数组为止

82
00:03:03,966 --> 00:03:06,800
然后还有一种方法是通过 d 规的形式

83
00:03:06,800 --> 00:03:07,733
利用 reduce

84
00:03:09,000 --> 00:03:10,700
利用 reduce


87
00:03:14,700 --> 00:03:15,500
利用 reduce

88
00:03:15,500 --> 00:03:17,666
然后呃 reduce 去

89
00:03:17,866 --> 00:03:20,566
首先初始的是一个空数组

90
00:03:20,566 --> 00:03:22,466
然后他遍历每一项

91
00:03:22,466 --> 00:03:25,466
如果这一项是一个普通类型的话

92
00:03:25,466 --> 00:03:26,166
就不是数组

93
00:03:26,166 --> 00:03:28,500
就把它放进去

94
00:03:29,100 --> 00:03:31,466
啊通过 kaita 把它加入到这个是

95
00:03:31,666 --> 00:03:34,333
前面这个出就是他的这个初始相中

96
00:03:34,666 --> 00:03:35,866
如果他是一个数字的话

97
00:03:35,866 --> 00:03:37,100
就递规一次这个函数

98
00:03:37,100 --> 00:03:39,066
让他再进去再去这样子

99
00:03:39,933 --> 00:03:40,900
啊里边通

100
00:03:40,900 --> 00:03:44,100
过一个三个运算的形式啊嗯行好对

101
00:03:44,100 --> 00:03:45,166
因为我在下边也

102
00:03:45,166 --> 00:03:45,966
看到你

103
00:03:45,966 --> 00:03:47,800
了解过浏览器获取摄像头

104
00:03:47,800 --> 00:03:49,566
视频流的一些方法

105
00:03:49,700 --> 00:03:50,700
并且获取照片

106
00:03:50,700 --> 00:03:51,366
在这个里面

107
00:03:51,366 --> 00:03:53,766
有可能涉及到一些二进制的一些东西

108
00:03:54,466 --> 00:03:56,600
然后 TypedArray 和 ArrayBuffer

109
00:03:56,600 --> 00:03:58,466
他也是 ES6 新加的一个东西

110
00:03:58,466 --> 00:04:00,466
你对这两个有了解吗

112
00:04:06,700 --> 00:04:10,133
这两个不是很清楚

113
00:04:10,133 --> 00:04:11,600
都是简单了解他

114
00:04:11,733 --> 00:04:14,000
我只知道他们是新增的二进制的

115
00:04:14,000 --> 00:04:15,266
数据格式

116
00:04:15,733 --> 00:04:17,666
呃然后嗯

117
00:04:18,900 --> 00:04:20,666
啊不是很清楚吧

118
00:04:20,900 --> 00:04:21,900
啊这一款

119
00:04:22,133 --> 00:04:24,000
嗯好嗯

120
00:04:24,066 --> 00:04:26,166
那你获取摄像头视频流的时候

121
00:04:26,166 --> 00:04:27,466
有没有使用 TypedArray

122
00:04:27,533 --> 00:04:30,066
或者 ArrayBuffer 去做一下操作

123
00:04:31,566 --> 00:04:32,400
嗯我没有

124
00:04:32,400 --> 00:04:33,966
我获取视频流的

125
00:04:34,100 --> 00:04:37,000
是直接通过他的一些 api 的

126
00:04:37,000 --> 00:04:38,600
是连续调用吧

127
00:04:38,600 --> 00:04:41,400
相当于就是他的一些 app 获取掉

128
00:04:41,666 --> 00:04:42,666
呃视频流之后

129
00:04:42,666 --> 00:04:44,866
直接将视频流复制给那个

130
00:04:44,933 --> 00:04:47,900
vido 的一个 srcobject 的属性

131
00:04:47,900 --> 00:04:50,066
就可以直接显示这个视频了

132
00:04:50,066 --> 00:04:51,966
就是不需要通过额外的

133
00:04:52,200 --> 00:04:54,200
比如说二金制的处理什么的

134
00:04:54,200 --> 00:04:56,466
因为我获取视频流其实就是

135
00:04:56,666 --> 00:04:59,333
只需要就是将它展示到页面上

136
00:04:59,333 --> 00:05:01,566
就是把用户的那个摄像头看到的

137
00:05:01,800 --> 00:05:04,366
那个视频展示到界面上

138
00:05:04,366 --> 00:05:06,133
让用户看到自己的脸这样子

139
00:05:06,133 --> 00:05:07,800
所以其实就只需要把

140
00:05:07,900 --> 00:05:09,166
那个视频流获取到后

141
00:05:09,166 --> 00:05:11,733
付给 widow 元素的 sso bjex

142
00:05:11,766 --> 00:05:12,800
属性就可以

143
00:05:12,800 --> 00:05:14,400
而不需要额外的操作

144
00:05:14,900 --> 00:05:16,166
嗯行好

145
00:05:16,300 --> 00:05:20,600
那你有没有听过一个 api 叫 WebStream API

146
00:05:22,366 --> 00:05:24,900
叫什么 API ？

147
00:05:26,866 --> 00:05:28,166
呃没有

148
00:05:28,200 --> 00:05:31,000
对他是在浏览器中处理流的一种方式

149
00:05:31,000 --> 00:05:32,700
因为我们去发请求

150
00:05:32,700 --> 00:05:34,266
后拿到响应 response

151
00:05:34,266 --> 00:05:35,400
他也是一个流

152
00:05:35,600 --> 00:05:36,600
对这个

153
00:05:37,066 --> 00:05:40,966
对这个在前端他应该是说我们接触的

154
00:05:41,366 --> 00:05:42,933
其实也并不是很多

155
00:05:42,966 --> 00:05:45,500
但是有时候要做一些比较复杂的

156
00:05:45,500 --> 00:05:46,133
二进制

157
00:05:46,133 --> 00:05:48,766
交互比较多的话就有可能和他

158
00:05:49,166 --> 00:05:50,500
涉及到的比较多

159
00:05:52,166 --> 00:05:54,400
嗯对比嗯对

160
00:05:54,466 --> 00:05:55,733
然后还有刚才泰尔瑞

161
00:05:55,733 --> 00:05:56,900
估计也是没有场景

162
00:05:56,900 --> 00:05:57,766
如果有场景的话

163
00:05:57,766 --> 00:05:59,300
估计就会对他进行了解

164
00:05:59,333 --> 00:06:03,466
不过他也是 ES6 新增的一个在 ES 规范

165
00:06:03,466 --> 00:06:05,666
就是在这个语言规范的上的一个东西

166
00:06:05,666 --> 00:06:08,866
所以下去也得最好也再看一看

167
00:06:10,166 --> 00:06:11,966
啊好

168
00:06:12,866 --> 00:06:15,533
了解 Blob Api 吗

170
00:06:18,966 --> 00:06:22,200
大概是知道的，也是也是只是了解过

171
00:06:22,200 --> 00:06:25,300
就是它是二进制文件的一种格式

172
00:06:25,300 --> 00:06:28,133
然后像浏览器常用的 File

173
00:06:28,166 --> 00:06:29,366
就是基于 Blob 的

174
00:06:29,366 --> 00:06:30,800
一个继承的

175
00:06:30,966 --> 00:06:33,266
继承的，就是常用的 File 是

176
00:06:33,666 --> 00:06:37,333
然后 Blob 它...

177
00:06:39,333 --> 00:06:42,400
其实也只是大概知道它的作用吧

178
00:06:42,400 --> 00:06:45,466
对其实说到这里就差不多

179
00:06:45,466 --> 00:06:47,766
但是你刚才说它是基于二进制的

180
00:06:47,866 --> 00:06:50,066
其实他和二进制也没什么

181
00:06:50,066 --> 00:06:50,866
必然的关系吧

182
00:06:50,866 --> 00:06:51,800
他有可能是二进制的

183
00:06:51,800 --> 00:06:53,333
也有可能不是二进制的

184
00:06:55,866 --> 00:06:58,566
对所以他其实更像也是一个 File

185
00:06:58,900 --> 00:07:00,066
一个文件

186
00:07:00,600 --> 00:07:02,466
因为在我们的操作系统上

187
00:07:02,466 --> 00:07:03,600
他有一些文件系统

188
00:07:03,600 --> 00:07:05,200
但是在我们的

189
00:07:05,866 --> 00:07:07,066
浏览器端

190
00:07:07,600 --> 00:07:09,200
他就是一些 Blob API

191
00:07:09,500 --> 00:07:11,100
就相当于一个文件吧

192
00:07:12,766 --> 00:07:14,933
啊对对对

193
00:07:15,733 --> 00:07:19,133
我在这里有一个引申的一个问题

194
00:07:19,133 --> 00:07:21,566
他和 Blob 也有点关系

195
00:07:21,566 --> 00:07:24,100
你下去的时候可以根据这个问题去

196
00:07:24,800 --> 00:07:25,466
学习一下

197
00:07:25,466 --> 00:07:26,933
Blob 这个 API

198
00:07:26,933 --> 00:07:30,100
[问]你如何去点击保存一个 pdf

200
00:07:38,166 --> 00:07:38,966
嗯

201
00:07:40,100 --> 00:07:43,100
或者说点击保存一个图片吧

202
00:07:44,800 --> 00:07:47,166
就是比如说你现在有一个浏览器

203
00:07:47,166 --> 00:07:49,000
你可以获取摄像头的视频

204
00:07:49,000 --> 00:07:50,500
然后并且去拍照

205
00:07:50,533 --> 00:07:52,200
然后你需要有一个按钮

206
00:07:52,200 --> 00:07:54,933
点击一下就会把这个图片去保存下来

207
00:07:54,933 --> 00:07:56,066
这个应该怎么做

208
00:07:57,166 --> 00:07:58,966
我项目中的那个

209
00:07:58,966 --> 00:08:00,400
拍照的那个效果

210
00:08:00,766 --> 00:08:01,600
对对对

211
00:08:01,600 --> 00:08:04,300
然后比如说有一个按钮就是保存

212
00:08:04,300 --> 00:08:05,500
然后点下保存

213
00:08:05,500 --> 00:08:07,066
就会把这张图片给保存下来

214
00:08:07,066 --> 00:08:08,700
这个应该如何去做

215
00:08:10,533 --> 00:08:11,800
保存的话

216
00:08:11,800 --> 00:08:13,866
获取这张图片是可以获取

217
00:08:13,866 --> 00:08:16,900
但是保存到本地的话

218
00:08:17,066 --> 00:08:19,766
可能需要借助后端吧

219
00:08:19,800 --> 00:08:23,133
然后我这里实现的是通过一个

220
00:08:23,566 --> 00:08:27,500
Image Capture 的一个 API 事件

221
00:08:27,500 --> 00:08:30,200
我的项目中是通过这个 api 事件

222
00:08:30,200 --> 00:08:33,300
他其实就是获取视频流的轨道啊

223
00:08:33,300 --> 00:08:35,133
就是 getVideoTracks() 的

224
00:08:35,133 --> 00:08:37,100
获取到那个视频轨道之后

225
00:08:37,166 --> 00:08:40,133
然后将这个视频留的轨道传给这个

226
00:08:40,666 --> 00:08:45,333
Image Cature 作为参数

227
00:08:45,733 --> 00:08:48,700
然后再调用它上面的一个 takePhoto 方法

228
00:08:48,700 --> 00:08:50,166
就可以获取到这个

229
00:08:50,500 --> 00:08:52,333
照片的 blob 对象

230
00:08:52,333 --> 00:08:54,066
就是你刚刚说的那个 blob 对象

231
00:08:54,066 --> 00:08:55,600
然后就可以对它

232
00:08:55,933 --> 00:08:58,666
进行操作

233
00:08:58,800 --> 00:09:01,866
就是因为我的项目中是把它发送

234
00:09:01,900 --> 00:09:04,300
就可以呃放到 FormData

235
00:09:04,366 --> 00:09:06,533
或者转成 base64 格式的

236
00:09:06,766 --> 00:09:07,900
呃这样的去发送

237
00:09:07,900 --> 00:09:10,866
然后我想如果他通过这个方式

238
00:09:11,000 --> 00:09:13,266
既然他可以转成 base64

239
00:09:13,266 --> 00:09:15,866
或者他也是个 Blob 对象的话

240
00:09:16,100 --> 00:09:18,766
嗯其实他应该也是可以保存的

241
00:09:20,266 --> 00:09:22,666
啊对是这样子

242
00:09:22,733 --> 00:09:24,700
对刚才我问到 Blob 的时候

243
00:09:24,700 --> 00:09:26,666
你就可以把你刚才的这个东西

244
00:09:26,666 --> 00:09:27,600
给讲出来

245
00:09:27,600 --> 00:09:29,333
这样面试官就知道你对 Blob

246
00:09:29,333 --> 00:09:30,800
有一些实际的

247
00:09:31,166 --> 00:09:32,466
操作的经验

248
00:09:34,266 --> 00:09:35,900
啊对

249
00:09:36,166 --> 00:09:37,366
嗯然后 blob

250
00:09:37,566 --> 00:09:39,700
你去下载一个 blob 保存

251
00:09:39,800 --> 00:09:42,566
本地的话一般就是给你一个

252
00:09:42,700 --> 00:09:44,933
就是手动创建一个 a 标签

253
00:09:44,933 --> 00:09:47,900
然后并且把一个 a 标签 click

254
00:09:47,966 --> 00:09:49,566
赋值为一个 click 属性 (口误，应为 download)

255
00:09:49,566 --> 00:09:51,800
然后再点击它

256
00:09:52,066 --> 00:09:54,166
啊不是，有一个 download 属性

257
00:09:55,066 --> 00:09:56,400
a 标签有个 download 属性

258
00:09:56,400 --> 00:09:59,066
然后再模拟去点击这个 a 标签对

259
00:10:00,133 --> 00:10:00,733
对对

260
00:10:00,733 --> 00:10:03,333
是不是想起来这个做过以后。啊对对对

261
00:10:03,333 --> 00:10:04,866
看到过这个

262
00:10:05,966 --> 00:10:08,200
这是一些 saveAs

263
00:10:08,933 --> 00:10:10,733
一些库的原码

264
00:10:10,733 --> 00:10:12,300
他就是这样操作

265
00:10:12,300 --> 00:10:13,800
刚才你说的那个 

266
00:10:13,800 --> 00:10:15,866
那个 api

267
00:10:15,866 --> 00:10:16,800
叫什么 api

269
00:10:21,133 --> 00:10:22,466
呃就叫 Image Capture API

270
00:10:22,466 --> 00:10:25,300
其实这个我是在那个 mdn 翻出来的

271
00:10:25,300 --> 00:10:27,933
就是其实他一个一个就是跳转

272
00:10:27,933 --> 00:10:30,200
然后突然翻出来这样一个

273
00:10:30,366 --> 00:10:33,366
看到感觉用的不多就是，image capture

274
00:10:33,466 --> 00:10:34,300
就是这样一个

276
00:10:36,933 --> 00:10:40,266
然后把那个视频留个轨道传出就可以

278
00:10:42,700 --> 00:10:44,733
调用 takePhoto 的方法是这样

280
00:10:47,400 --> 00:10:48,700
捕获的那个

281
00:10:49,100 --> 00:10:50,466
就是这样的啊行好

282
00:10:50,466 --> 00:10:52,400
我已经找到他的1米之 capture

283
00:10:52,400 --> 00:10:53,366
点 take a photo

284
00:10:53,700 --> 00:10:56,366
然后他还有一些该 photo 的一些容

285
00:10:56,733 --> 00:11:00,133
容积啊什么的一些东西对号

286
00:11:01,766 --> 00:11:03,066
对你可以

287
00:11:03,766 --> 00:11:05,533
对这块感觉就是自己做的

288
00:11:05,533 --> 00:11:07,933
实践还是蛮好的

289
00:11:09,133 --> 00:11:11,566
啊行好

290
00:11:14,100 --> 00:11:14,900
好

291
00:11:17,066 --> 00:11:19,600
嗯在这里有一些关于 HTTP

292
00:11:19,600 --> 00:11:20,966
等计算机网络基础

293
00:11:20,966 --> 00:11:22,066
知识的了解

295
00:11:22,766 --> 00:11:27,733
[问]http的状态码有哪些

296
00:11:29,300 --> 00:11:31,000
http 定义的状态吗

297
00:11:31,000 --> 00:11:32,800
其实大致分可以分成五类吧

298
00:11:32,800 --> 00:11:35,400
就是以不同的五个数字开头的

299
00:11:35,400 --> 00:11:37,966
首先以 1 开头的不常见

300
00:11:37,966 --> 00:11:40,366
然后 1 开头的有常见的

301
00:11:40,366 --> 00:11:41,666
就比如说他

302
00:11:41,933 --> 00:11:44,733
他表示的意思就是接受到了请求

303
00:11:44,733 --> 00:11:45,700
然后向请求

304
00:11:46,100 --> 00:11:47,400
是网络请求继续

305
00:11:47,400 --> 00:11:48,766
就相当于他是一个

307
00:11:51,066 --> 00:11:52,800
然后常见的吧就是

308
00:11:53,133 --> 00:11:54,666
应该是就 websocket 协议

309
00:11:54,666 --> 00:11:56,533
在升级协议的时候

310
00:11:56,600 --> 00:11:59,466
它是通过应该是 101 状态码吧

311
00:11:59,466 --> 00:12:00,733
然后他相当于就是表示

312
00:12:01,000 --> 00:12:02,933
表示现在接受到了这个

313
00:12:02,933 --> 00:12:04,333
然后我要去升级协议

314
00:12:04,333 --> 00:12:06,300
然后我让你继续的这样一个过程

315
00:12:06,400 --> 00:12:09,800
然后2开头的状态码表示是成功

316
00:12:10,600 --> 00:12:11,800
常见

317
00:12:11,800 --> 00:12:13,700
最常见的就是 200 表示 ok

318
00:12:13,700 --> 00:12:14,933
表示请求一切正常

319
00:12:14,933 --> 00:12:16,133
没有任何问题

320
00:12:16,166 --> 00:12:18,100
然后收发都是正常的

321
00:12:18,266 --> 00:12:20,700
然后3开头的

323
00:12:25,166 --> 00:12:27,133
3开头的应该也是一种成功

324
00:12:27,133 --> 00:12:28,066
就是他表示

325
00:12:28,333 --> 00:12:32,000
比如说3301和302都表示是重定向啊

326
00:12:32,000 --> 00:12:33,900
301表示是永久重定向

327
00:12:33,900 --> 00:12:35,700
302表示是临时重定向

328
00:12:36,666 --> 00:12:38,733
然后304是缓存中的状态码

329
00:12:38,733 --> 00:12:40,066
就表示的是

330
00:12:40,066 --> 00:12:42,100
当天这个缓存还是可以继续使用

331
00:12:42,100 --> 00:12:43,800
然后就

332
00:12:44,133 --> 00:12:45,733
相当于他是一个

333
00:12:46,333 --> 00:12:48,200
就是也不是表示错误吧

334
00:12:48,200 --> 00:12:50,166
就只是说一个继续的一个过程

335
00:12:50,333 --> 00:12:55,333
嗯然后还有一个 303 状态吧应该是

337
00:12:57,000 --> 00:12:59,300
告知你应该通过 Get 请求

338
00:12:59,300 --> 00:13:01,266
向另外一个 url 发起

339
00:13:01,500 --> 00:13:03,533
发起请求就是资源在另外一个 url 上

340
00:13:03,533 --> 00:13:05,500
你应该向那个 url 上发起请求

341
00:13:06,000 --> 00:13:08,666
然后这是3的，然后4的话

342
00:13:08,866 --> 00:13:11,066
4开头的一般指的是客户端错误

343
00:13:11,466 --> 00:13:12,700
4和5都是指错误

344
00:13:12,700 --> 00:13:14,966
然后4开头的客户端错误常见的就

345
00:13:15,066 --> 00:13:16,166
400 bad request

346
00:13:16,533 --> 00:13:18,333
就是请求上有一些错误

347
00:13:19,133 --> 00:13:20,566
呃就是请请求

348
00:13:20,566 --> 00:13:21,766
有可能是请求的报文

349
00:13:21,766 --> 00:13:23,166
或者请求底上有一些错误

350
00:13:23,166 --> 00:13:24,466
然后呃

351
00:13:24,466 --> 00:13:26,300
常年还有比如说403

352
00:13:26,300 --> 00:13:28,500
表示是 forbidden 就是没有权限

353
00:13:28,800 --> 00:13:29,800
然后被禁止

354
00:13:29,800 --> 00:13:33,133
404就是找不到资源这样子呃

355
00:13:33,466 --> 00:13:36,333
还有5开头的话就是呃

356
00:13:36,600 --> 00:13:38,300
服务端的服务端的错误

357
00:13:38,300 --> 00:13:40,066
然后比如常见的就是五百

358
00:13:40,066 --> 00:13:42,133
五百的指的一般是不可预料的

359
00:13:42,133 --> 00:13:43,000
服务端错误

360
00:13:43,300 --> 00:13:45,333
就表示的是服务端出现了

361
00:13:45,333 --> 00:13:45,800
就比如说

362
00:13:45,800 --> 00:13:48,066
他们那边代码可能有一些问题

363
00:13:48,100 --> 00:13:51,166
然后这服务端崩溃或者这样的错误

364
00:13:51,466 --> 00:13:53,800
然后还有比如说

365
00:13:53,933 --> 00:13:57,166
502， Bad Gateway 一般指是网关配置错误

366
00:13:57,166 --> 00:13:58,766
这个好像

367
00:13:58,766 --> 00:14:00,600
前端好像处理不了这种错误

368
00:14:00,600 --> 00:14:01,733
一般可能是代理

369
00:14:01,733 --> 00:14:05,000
或者是网关的一些问题啊

370
00:14:05,066 --> 00:14:07,500
504的话还有表示的是超时

371
00:14:07,866 --> 00:14:10,766
然后就是这些状态了常见的

372
00:14:13,533 --> 00:14:18,300
[问]那502刚才你说的是什么意思

373
00:14:20,000 --> 00:14:20,800
哦

376
00:14:27,733 --> 00:14:29,666
怎么说相当于是

377
00:14:30,933 --> 00:14:31,900
嗯应该是

378
00:14:33,866 --> 00:14:36,000
有代理发生的错误吧

379
00:14:36,000 --> 00:14:36,666
有可能是

380
00:14:36,666 --> 00:14:39,100
我平常其实没有太遇见过这个问题

381
00:14:39,100 --> 00:14:41,300
应该是说是网关服务器的问题

382
00:14:41,866 --> 00:14:44,733
但是感觉对于前端来说好像不太能

383
00:14:44,966 --> 00:14:47,300
影响到这个错误的结果

384
00:14:50,800 --> 00:14:54,200
[问]那你自己有没有配置过 nginx

385
00:14:56,066 --> 00:14:58,566
呃没有嗯行好

386
00:14:58,566 --> 00:15:00,333
你自己去配置下 nginx

387
00:15:00,333 --> 00:15:03,366
然后就可以了解到502和504的这个区别

388
00:15:03,466 --> 00:15:06,400
然后你还可以去重现一下502和504

389
00:15:06,400 --> 00:15:07,400
这些状态码

390
00:15:07,533 --> 00:15:09,100
他们是怎么样的

391
00:15:10,533 --> 00:15:11,333
嗯

392
00:15:12,566 --> 00:15:14,566
对只需要去做一个

393
00:15:14,666 --> 00:15:18,766
在自己的本地也可以自己这么去做

394
00:15:21,066 --> 00:15:22,200
嗯好的

395
00:15:22,466 --> 00:15:24,366
嗯行好对

396
00:15:24,366 --> 00:15:26,966
我们使用跨域的时候

397
00:15:26,966 --> 00:15:28,066
我们解决跨越的时候

398
00:15:28,066 --> 00:15:30,400
现在最流行的方法是使用在 app

399
00:15:30,766 --> 00:15:32,666
做一个 cors 的配置

400
00:15:32,733 --> 00:15:34,900
他是在我们的响应

401
00:15:35,533 --> 00:15:37,566
他是在我们的响应头里面

402
00:15:37,566 --> 00:15:38,500
去配置几个字段

403
00:15:38,500 --> 00:15:39,800
[问]你知道(配置跨域的 reponse header)是哪几个吗

405
00:15:42,733 --> 00:15:45,066
access control allow origin

406
00:15:45,200 --> 00:15:46,100
就这几个呃

407
00:15:46,100 --> 00:15:48,800
一般是 access control 开头的几个

408
00:15:48,800 --> 00:15:49,600
剩下的字段

409
00:15:49,766 --> 00:15:52,333
然后最根本的就是这个

410
00:15:52,333 --> 00:15:54,866
最关键的就是 access control allow origin

411
00:15:55,333 --> 00:15:56,866
就是配置有哪些源

412
00:15:56,900 --> 00:15:59,500
[重]就请求中因为会携带一个 origin 字段

413
00:15:59,500 --> 00:16:01,500
表示我的请求来自于哪个圆

414
00:16:01,500 --> 00:16:03,733
然后我想用途中把这个圆加进去

415
00:16:03,800 --> 00:16:06,000
或者是可以带一个星号

416
00:16:06,000 --> 00:16:07,500
表示所有源都可以

419
00:16:13,566 --> 00:16:15,133
然后还有几个类似的

420
00:16:15,133 --> 00:16:17,733
就也是这几个 access control 开头的

421
00:16:17,733 --> 00:16:20,166
比如控制他的请求头有哪些

422
00:16:20,166 --> 00:16:22,400
然后控制他的请求方法有哪些

423
00:16:22,533 --> 00:16:24,000
等等主要是这个

424
00:16:25,400 --> 00:16:26,500
嗯行好

425
00:16:26,500 --> 00:16:30,266
[问]那 cors 使用 * 有什么缺陷吗

426
00:16:31,933 --> 00:16:33,766
呃我觉得使用 * 的话

427
00:16:33,766 --> 00:16:36,500
其实可能一个是安全

428
00:16:36,566 --> 00:16:38,700
因为如果是任何人都能请求的话

429
00:16:38,700 --> 00:16:41,266
其实就丧失了跨越的安全目的

430
00:16:41,266 --> 00:16:44,166
就相当于是你任何都可以请求的话

431
00:16:44,166 --> 00:16:45,066
其实你从

433
00:16:50,100 --> 00:16:52,266
嗯所以如果为了安全的话

434
00:16:52,266 --> 00:16:54,200
尽可能还是把需要的源给

435
00:16:54,366 --> 00:16:57,400
就写进去然后好一些

436
00:17:00,300 --> 00:17:02,466
它除了这个问题还有其他

437
00:17:02,466 --> 00:17:03,300
问题吗

438
00:17:04,866 --> 00:17:06,466
是什么的问题

439
00:17:06,600 --> 00:17:08,266
我说他除了这个安全性问题

440
00:17:08,266 --> 00:17:10,133
他有没有其他的一些问题

441
00:17:12,166 --> 00:17:14,900
其它的问题不太清楚

442
00:17:17,066 --> 00:17:18,500
嗯行好

443
00:17:20,900 --> 00:17:23,533
对他还有一个 cookie 一个问题

444
00:17:24,766 --> 00:17:27,400
这个下去你可以去看一下

445
00:17:28,400 --> 00:17:29,200
哦

446
00:17:30,100 --> 00:17:33,400
[问] 你说下 http2 吧

447
00:17:35,666 --> 00:17:37,600
http2

448
00:17:37,866 --> 00:17:40,966
他其实是是对于 http 的一个

449
00:17:40,966 --> 00:17:41,900
大的更新吧

450
00:17:41,900 --> 00:17:44,500
就是 http 有一些变化

451
00:17:44,500 --> 00:17:46,500
主要首先一个他是

452
00:17:46,666 --> 00:17:48,333
永久连接

453
00:17:48,400 --> 00:17:51,133
不仅仅是相当于 http 的 keep-alive

454
00:17:51,466 --> 00:17:52,700
它其实相当于建立的

455
00:17:52,700 --> 00:17:54,933
就是默认的是一个永久的连接

456
00:17:55,100 --> 00:17:58,133
然后第二个它是一个二进制的协议

457
00:17:58,200 --> 00:18:02,700
就这他的报文段就是他的

458
00:18:02,700 --> 00:18:04,133
其实他的

459
00:18:04,133 --> 00:18:06,400
整个报文其实都是一个二进制的

460
00:18:06,666 --> 00:18:08,500
不管是他的请求头还是请求体

461
00:18:08,500 --> 00:18:09,933
他都是二进制的形式

462
00:18:10,266 --> 00:18:10,600
然后

463
00:18:10,600 --> 00:18:12,933
因为之前的 http 协议都是文本形式

464
00:18:12,933 --> 00:18:15,066
但是他直接采用的二进制的形式

465
00:18:15,100 --> 00:18:17,566
然后他将整个

466
00:18:17,566 --> 00:18:20,166
他将这个就是整个报文段分成

467
00:18:20,166 --> 00:18:22,100
按照大小分成不同的帧啊

468
00:18:22,100 --> 00:18:24,200
他引入了帧和流的这个概念

469
00:18:24,966 --> 00:18:27,166
然后 frame 的话其实就是他的

470
00:18:27,166 --> 00:18:28,666
就是将他那个报文段

471
00:18:28,666 --> 00:18:30,000
二进制的报文段分割

472
00:18:30,000 --> 00:18:31,266
分割成一个一个小块

473
00:18:31,266 --> 00:18:33,066
然后每个小块称为一个帧 frame

475
00:18:35,366 --> 00:18:37,800
客户端和服务器端来回发送的

476
00:18:37,800 --> 00:18:39,600
这个是来回传输的

477
00:18:39,600 --> 00:18:41,100
这个过程称为一个流

478
00:18:41,333 --> 00:18:44,600
然后流其实流是通过帧的首部来标识

480
00:18:46,466 --> 00:18:47,500
然后因为

481
00:18:47,900 --> 00:18:51,100
有流的这个流和这个帧的代入的话

482
00:18:51,100 --> 00:18:54,100
其实他就可以实现一个多路服用嗯

483
00:18:54,100 --> 00:18:54,600
就是

484
00:18:54,600 --> 00:18:56,900
相当于可以同时在他的这个传输中

485
00:18:56,900 --> 00:18:57,600
有很多

487
00:18:58,500 --> 00:19:00,666
可以任意的双方可以任意的去

488
00:19:00,866 --> 00:19:04,000
发送这个请求或者是响应

489
00:19:04,000 --> 00:19:05,933
不限制请求和响应的数量

490
00:19:06,300 --> 00:19:07,366
然后

491
00:19:08,100 --> 00:19:10,100
已经有这个情况呢啊啊不

492
00:19:10,133 --> 00:19:11,966
因为不限制停响的数量的话

493
00:19:11,966 --> 00:19:13,400
所以他也不会出现像

494
00:19:13,533 --> 00:19:15,933
前几个版本中的队头阻塞的问题

495
00:19:16,400 --> 00:19:18,900
呃然后还有的变化就

497
00:19:21,266 --> 00:19:23,666
可以主动的向客户端推送一些

498
00:19:24,066 --> 00:19:24,733
数据

499
00:19:24,733 --> 00:19:27,300
就是不像是在之前那些请求中

500
00:19:27,300 --> 00:19:28,733
只能通过以请求

501
00:19:28,766 --> 00:19:30,533
以响应的形式来获取数据

502
00:19:30,566 --> 00:19:31,766
在2的建立中

503
00:19:31,766 --> 00:19:34,333
他可以向主动地向客户端去推送

504
00:19:35,133 --> 00:19:36,133
然后还有一个把

505
00:19:36,133 --> 00:19:38,466
就是可能是他的优先级机制

506
00:19:38,900 --> 00:19:41,600
就是 http2 引入了优先级这个东西

507
00:19:41,666 --> 00:19:42,933
就每一个请求

508
00:19:42,933 --> 00:19:44,933
其实都可以带有一个优先级

509
00:19:45,333 --> 00:19:47,966
然后优先级越高的就会越先处理

510
00:19:47,966 --> 00:19:50,100
这个也是从一定程度上解决着队头

511
00:19:50,100 --> 00:19:51,166
阻塞的问题

512
00:19:51,766 --> 00:19:53,500
主要是这几个变化

513
00:19:55,000 --> 00:19:57,066
嗯行好你刚才也说到 server push

514
00:19:57,066 --> 00:19:59,333
[问]那他和 websocket 他有什么区别

515
00:20:02,133 --> 00:20:02,933
呃

516
00:20:03,500 --> 00:20:05,166
也不太清楚

518
00:20:09,066 --> 00:20:10,100
就是推一些资源

531
00:20:33,666 --> 00:20:36,133
嗯你们现在开始学习操作系统了吗

532
00:20:36,133 --> 00:20:37,800
应该大三才学是吧

533
00:20:38,766 --> 00:20:39,566
哦

534
00:20:40,533 --> 00:20:42,800
啊就是现在还没学操作系统是吧

535
00:20:43,400 --> 00:20:45,100
啊就只了解一点吧

536
00:20:45,100 --> 00:20:46,966
但是了解的不是很多

537
00:20:47,700 --> 00:20:48,566
嗯好

538
00:20:48,766 --> 00:20:51,333
你有没有一些 linux 服务器

539
00:20:52,733 --> 00:20:54,166
嗯没有

540
00:20:54,966 --> 00:20:55,766
嗯

541
00:20:56,266 --> 00:20:58,900
啊行好那我还是往下继续

542
00:20:58,900 --> 00:21:00,966
问你一些 webpack 的一些东西吧

543
00:21:02,066 --> 00:21:03,366
嗯嗯好

544
00:21:03,500 --> 00:21:05,166
在这里面有一个了解 webpack

545
00:21:05,166 --> 00:21:07,000
基本配置和使用

546
00:21:08,333 --> 00:21:11,066
你这个 webpack 的了解

547
00:21:11,066 --> 00:21:13,566
[问]你是怎么去学习 webpack 的

548
00:21:15,066 --> 00:21:16,766
主要是那个

549
00:21:16,800 --> 00:21:19,566
有一个深入浅出 webpack 的这本书

550
00:21:19,966 --> 00:21:21,966
然后还有就是官方文档吧

551
00:21:21,966 --> 00:21:23,100
主要这两个

552
00:21:26,000 --> 00:21:29,866
这本书这个是实体书吗

553
00:21:31,100 --> 00:21:33,200
是实体书

554
00:21:33,200 --> 00:21:34,966
但是我找到他的电子版

556
00:21:38,366 --> 00:21:40,300
这是国人写的一本书是吧

557
00:21:40,933 --> 00:21:41,733
啊对

558
00:21:42,600 --> 00:21:43,933
嗯行好

559
00:21:45,533 --> 00:21:48,933
[问]对然后你对 webpack 有一些使用经验

560
00:21:48,933 --> 00:21:52,166
就是你可以说一下他有哪些经验

561
00:21:54,266 --> 00:21:55,966
我觉得就 webpack

562
00:21:56,000 --> 00:21:58,200
主要的使用就是配置上的吧

563
00:21:58,200 --> 00:21:59,200
一个是配置

564
00:21:59,200 --> 00:22:01,266
还有一个是优化

565
00:22:01,733 --> 00:22:02,366
配置的话

566
00:22:02,366 --> 00:22:04,666
因为它其实相当于是一个黑盒一样

567
00:22:04,666 --> 00:22:06,133
就是你只需要配置它

568
00:22:06,300 --> 00:22:08,133
然后至于它内部怎么样操作的话

569
00:22:08,133 --> 00:22:11,133
其实 webpack 是不需要你去关心的呃

570
00:22:11,133 --> 00:22:12,766
所以主要的使用上就

571
00:22:12,766 --> 00:22:14,400
其实也就是他的配置

572
00:22:14,700 --> 00:22:17,566
然后他的配置主要通过 

573
00:22:17,766 --> 00:22:18,766
webpack.config.js

574
00:22:18,766 --> 00:22:21,566
以及他的 cli 的命令行配置

575
00:22:21,566 --> 00:22:24,200
然后命令行的话感觉用的比较少一些

576
00:22:24,200 --> 00:22:26,500
基本上大部绝大部分都是通过

577
00:22:26,866 --> 00:22:28,566
webpack 的文件配置

582
00:22:38,066 --> 00:22:42,133
[问]你讲下优化吧，讲重点的一些优化来讲

584
00:22:42,666 --> 00:22:44,866
呃对然后优化优化方面的话

585
00:22:45,000 --> 00:22:46,866
呃我觉得我个人使用过

586
00:22:46,866 --> 00:22:49,400
的优化是主要有以下就是

587
00:22:49,533 --> 00:22:52,600
首先是怎么说就是路径的解析吧

588
00:22:52,600 --> 00:22:55,533
就是从路径的解析上优化它

589
00:22:56,066 --> 00:22:58,566
因为 webpack 在文件数量很大的时候

590
00:22:58,566 --> 00:23:01,566
它的解析就会变得非常地

591
00:23:02,000 --> 00:23:03,366
因为他需要按照

592
00:23:03,366 --> 00:23:05,100
那个相互的引用关系去解析

593
00:23:05,100 --> 00:23:06,600
所以解析就会变得非常大

594
00:23:06,700 --> 00:23:08,966
包括一些模块的引入之类的

595
00:23:08,966 --> 00:23:11,500
所以就可以通过解析的

596
00:23:11,500 --> 00:23:13,700
就是设置他的一些解析路径

597
00:23:13,700 --> 00:23:16,366
让他搜缩小他文件的搜索范围

598
00:23:16,666 --> 00:23:18,700
然后比如说通过 loader

599
00:23:18,700 --> 00:23:20,766
因为 loader 是一个很费时的过程

600
00:23:20,866 --> 00:23:22,066
然后他是

601
00:23:22,200 --> 00:23:24,000
在 loader 的一些配置里

602
00:23:24,000 --> 00:23:26,300
比如通过 include/exclude 的

603
00:23:26,400 --> 00:23:29,733
这些就是明确的指明需要哪一些文件

604
00:23:29,800 --> 00:23:32,500
而且哪些路径下的文件需要配置哪些

605
00:23:32,500 --> 00:23:34,733
比如说排除掉 node-modules

606
00:23:35,700 --> 00:23:37,866
这样子然后只可以让 loader 去减少

607
00:23:37,866 --> 00:23:42,333
减少他那个就是查找的那个时间呃

609
00:23:45,066 --> 00:23:47,666
然后还有一个就是通过他的那个 resolve

610
00:23:47,666 --> 00:23:48,500
这个配置

611
00:23:48,666 --> 00:23:50,366
resolve 这个配置上就是在他

612
00:23:50,800 --> 00:23:52,333
顶层的这个 resolve 配置

613
00:23:52,333 --> 00:23:55,133
这个配置像主要是配置一些解析的呃

614
00:23:55,133 --> 00:23:57,333
比如说他底下可以配置一个 alas

615
00:23:57,466 --> 00:23:58,466
路径别名

616
00:23:59,066 --> 00:24:00,600
然后我也不知道

617
00:24:00,600 --> 00:24:01,700
我也不知道这个词怎么读

618
00:24:01,700 --> 00:24:03,366
就是就是路径别名这个东西

619
00:24:03,533 --> 00:24:06,100
然后他其实可以减少搜索范围

620
00:24:06,100 --> 00:24:07,766
通过把一些路径

621
00:24:07,933 --> 00:24:10,100
把它缩减成绝对路径的形式

622
00:24:10,133 --> 00:24:11,733
或者是明确的指明

624
00:24:15,500 --> 00:24:17,166
我可以把它直接写成

626
00:24:20,933 --> 00:24:22,766
或者是其他的一些明确的路径

627
00:24:22,766 --> 00:24:23,800
然后这样可以

628
00:24:24,000 --> 00:24:25,600
减少他的搜索范围

629
00:24:25,600 --> 00:24:26,766
就他到到

630
00:24:26,766 --> 00:24:29,400
到各处的 node-modules 里边去搜索 react 范围

631
00:24:29,400 --> 00:24:30,300
然后通过

632
00:24:30,866 --> 00:24:32,733
这是别名的性质

633
00:24:32,766 --> 00:24:36,666
然后还有就是通过这个 extension 字段

634
00:24:36,666 --> 00:24:38,666
就这个字段是配置他的

635
00:24:38,666 --> 00:24:41,400
就是后缀吧就是相当于

636
00:24:41,566 --> 00:24:44,733
呃如果我明确的在 extense 里边

637
00:24:45,000 --> 00:24:46,066
指明他的后缀

638
00:24:46,066 --> 00:24:47,000
其实也可以减少

639
00:24:47,000 --> 00:24:49,900
他的后缀匹配的这个时间

640
00:24:50,500 --> 00:24:52,100
然后还有可以通过

666
00:25:49,600 --> 00:25:51,000
呃然后呃

667
00:25:51,000 --> 00:25:53,800
还有就它里边有一些具体的配置

668
00:25:53,800 --> 00:25:55,133
然后呃

669
00:25:55,133 --> 00:25:57,100
就配置配置他怎么压缩这个

670
00:25:57,100 --> 00:25:59,666
这个具体的使用上的问题

671
00:25:59,666 --> 00:26:02,466
然后还有就是压缩 css 啊

672
00:26:02,466 --> 00:26:03,533
css 的压缩

673
00:26:03,600 --> 00:26:04,800
我记得是直接携带

674
00:26:04,800 --> 00:26:06,733
在这个 css-loder 里边的

675
00:26:07,066 --> 00:26:09,133
是可以通过开启他的 mini size

676
00:26:09,133 --> 00:26:10,600
就是 css loder

677
00:26:10,600 --> 00:26:12,766
直接通过问号 mini size 的形式

678
00:26:12,766 --> 00:26:13,700
就可以开启

680
00:26:15,300 --> 00:26:17,266
然后压缩代码也可以

681
00:26:17,300 --> 00:26:20,566
就是就相当于减少代码的占用吧

682
00:26:20,566 --> 00:26:22,566
也可以就加快 loader 的一些

683
00:26:22,900 --> 00:26:24,600
loader 解析速度以及

684
00:26:25,200 --> 00:26:26,600
加快他的编译速度

685
00:26:27,100 --> 00:26:30,333
然后还有就是有压缩代码还可以通过

686
00:26:30,733 --> 00:26:32,600
其实这个应该不算压缩代码

687
00:26:32,600 --> 00:26:33,700
就是通过 Tree Shaking

688
00:26:34,266 --> 00:26:36,766
可以去剔除无用的代码

689
00:26:38,000 --> 00:26:40,100
呃就是提出到一些

690
00:26:40,100 --> 00:26:41,966
比如说没有使用的变量

691
00:26:41,966 --> 00:26:44,766
然后声明呢没有使用的变量方程呃

692
00:26:44,766 --> 00:26:46,333
变量函数这一类的

693
00:26:46,600 --> 00:26:48,933
然后就是踢出要没有用的代码之后

695
00:26:50,600 --> 00:26:53,300
其实我在 wifi 5的文档里面发现他

696
00:26:53,300 --> 00:26:55,300
我我一开始以为他是个插件后

697
00:26:55,300 --> 00:26:56,100
后来发现

698
00:26:56,100 --> 00:26:59,500
他其实是通过一个命令行来启动的

699
00:26:59,766 --> 00:27:02,500
就是他需要 uglify js plugging 的配合

700
00:27:02,500 --> 00:27:04,100
然后再通过命令个行

701
00:27:04,333 --> 00:27:06,566
启动他就可以开启

702
00:27:06,766 --> 00:27:09,166
然后他会自动的去检查你的代码

703
00:27:09,166 --> 00:27:10,933
然后提出你代码没用的东西

704
00:27:10,933 --> 00:27:12,933
没用的些部分

708
00:27:21,100 --> 00:27:23,933
就是你自己编写的 js 文件中的代码

709
00:27:23,966 --> 00:27:26,166
然后对于库中的文件没有办法

710
00:27:27,733 --> 00:27:28,933
然后

711
00:27:29,566 --> 00:27:30,266
还有一个吧

712
00:27:30,266 --> 00:27:32,500
还有一个就是我我没有太常用过

715
00:27:38,166 --> 00:27:39,666
也是一个插件

716
00:27:39,666 --> 00:27:42,533
就是它是通过多进程的形式

717
00:27:42,566 --> 00:27:45,000
来加速打包过程哎

718
00:27:45,000 --> 00:27:45,366
或者哎

719
00:27:45,366 --> 00:27:48,766
应该说是加速加速 loader 的转换过程吧

720
00:27:49,000 --> 00:27:53,366
有他通过在配置 loader 的时候呃

721
00:27:53,500 --> 00:27:55,333
配置 loader 的时候用使用这个

799
00:30:54,300 --> 00:30:55,733
对应该是这样子

800
00:30:57,666 --> 00:30:59,133
嗯行好

801
00:31:00,700 --> 00:31:03,466
嗯对然后你简历上在这写了了解

802
00:31:03,466 --> 00:31:05,100
webpack 基本配置和使用

803
00:31:05,100 --> 00:31:05,900
是吧

804
00:31:06,933 --> 00:31:11,100
嗯嗯你把它改成熟练或者掌握

805
00:31:11,200 --> 00:31:13,800
因为你在这写成了解面试官有可能

806
00:31:14,533 --> 00:31:17,100
是想挖掘你的

807
00:31:19,466 --> 00:31:21,666
亮点但你在这写一个了解

808
00:31:21,666 --> 00:31:23,733
他有可能就会觉得你这个 webpack

809
00:31:23,766 --> 00:31:26,100
其实只是一个了解的成分

810
00:31:26,200 --> 00:31:27,666
就不会多问你

811
00:31:27,666 --> 00:31:28,800
然后反而

812
00:31:28,866 --> 00:31:31,766
你在这上面亮点就体现不出来

813
00:31:33,100 --> 00:31:33,766
哦对

816
00:31:37,000 --> 00:31:38,766
他有可能就不会问你这个问题

817
00:31:38,766 --> 00:31:42,900
然后你会的那么多其实就有点浪费

818
00:31:42,900 --> 00:31:44,466
所以你可以在这里把它写成

819
00:31:44,466 --> 00:31:45,600
熟练或者掌握

820
00:31:45,700 --> 00:31:47,766
这样面试官的时候对你

821
00:31:47,800 --> 00:31:49,533
对问你 webpack 和这个问题的

822
00:31:49,533 --> 00:31:51,000
兴趣就会变大

823
00:31:52,666 --> 00:31:53,600
哦哦

824
00:31:55,500 --> 00:31:56,566
嗯行好

825
00:31:56,566 --> 00:31:59,200
那接下来看一下你的这两个项目吧

826
00:32:01,666 --> 00:32:02,766
嗯好

827
00:32:02,766 --> 00:32:04,133
在这里面有一些了解

828
00:32:04,133 --> 00:32:05,500
React 一些优化方法

829
00:32:05,500 --> 00:32:07,900
[问]你说下 react 这些优化方法吧

1075
00:41:06,533 --> 00:41:07,866
我想说的就是

1076
00:41:08,100 --> 00:41:12,666
[问]感觉面试的知识量很大，就是怎么样能保证记住他

1078
00:41:12,333 --> 00:41:14,733
就感觉复习的过程中

1079
00:41:15,100 --> 00:41:16,066
反复的来看

1080
00:41:16,066 --> 00:41:18,700
但是看一遍还是有一些细节会忘掉

1081
00:41:18,700 --> 00:41:19,800
就是呃

1082
00:41:19,800 --> 00:41:21,900
可能因为他的知识量很大

1083
00:41:21,900 --> 00:41:23,566
然后有一些具体的

1084
00:41:23,800 --> 00:41:25,700
细节可能记得不是这么清楚

1085
00:41:25,700 --> 00:41:27,300
但是你要反反复复复习的话

1086
00:41:27,300 --> 00:41:29,166
又好像占用了很多的时间

1087
00:41:29,466 --> 00:41:30,000
然后问一下

1088
00:41:30,000 --> 00:41:32,900
这个有没有什么方法能够比较合适

1089
00:41:32,900 --> 00:41:34,366
就是呃

1090
00:41:34,866 --> 00:41:36,133
既能复习到

1091
00:41:36,700 --> 00:41:37,666
比较细的知识点

1092
00:41:37,666 --> 00:41:39,933
又能保证这些东西能记住

1093
00:41:40,466 --> 00:41:41,800
嗯行好

1094
00:41:42,466 --> 00:41:46,400
对那我们就以刚才的 http2 为例吧对
