1
00:00:00,223 --> 00:00:00,608
大家好

2
00:00:00,608 --> 00:00:04,292
我是山月，今天面试一位大二的同学

3
00:00:04,292 --> 00:00:05,734
这是他的简历

4
00:00:06,118 --> 00:00:08,521
他自己做了一个个人博客

5
00:00:08,521 --> 00:00:10,636
还有一些前端脚手架

6
00:00:11,309 --> 00:00:12,687
喂你好

7
00:00:13,295 --> 00:00:14,801
你好

8
00:00:14,993 --> 00:00:18,037
然后我对你这个前端脚手架比较感兴趣

9
00:00:18,037 --> 00:00:19,671
然后你这个前端脚手架

10
00:00:19,671 --> 00:00:23,324
它是在一个什么样的背景下做的这个事情

11
00:00:25,695 --> 00:00:29,155
在因为当时我是刚学那个 vue3 和 ts

12
00:00:29,539 --> 00:00:30,981
急需要一个项目练手

13
00:00:30,981 --> 00:00:33,064
所以说当时是做前端脚手架

14
00:00:33,096 --> 00:00:35,242
因为他都是用最新技术做的吗是吧

15
00:00:35,883 --> 00:00:39,472
嗯对所以你要使用 vue 去练手

16
00:00:39,536 --> 00:00:41,586
然后没有使用他官方的脚手架

17
00:00:41,586 --> 00:00:42,868
就自己写了一个脚手架

18
00:00:42,868 --> 00:00:44,246
然后去做这件事情

19
00:00:44,983 --> 00:00:45,976
嗯对因为

20
00:00:46,264 --> 00:00:48,987
当时刚学和 ts 结合这两个

21
00:00:48,987 --> 00:00:49,820
因为我没有

22
00:00:49,820 --> 00:00:51,583
就是没有这两个结合起来没有时间

23
00:00:51,583 --> 00:00:52,448
所以说我需要

24
00:00:52,640 --> 00:00:55,139
练一个项目然后这两个结合起来

25
00:00:57,638 --> 00:01:05,520
[问]你写这个项目的时候有没有一些难点

26
00:01:06,513 --> 00:01:07,667
嗯这个项目

27
00:01:07,667 --> 00:01:09,525
其实因为我们的后端是用的

28
00:01:09,525 --> 00:01:10,935
mock 假数据模拟的

29
00:01:11,127 --> 00:01:13,434
所以呢我 mock 假数据模拟的时候

30
00:01:13,434 --> 00:01:15,036
我要做那个权限控制

31
00:01:15,036 --> 00:01:15,965
因为我这个后

32
00:01:16,157 --> 00:01:17,118
因为我这个脚手架他

33
00:01:17,118 --> 00:01:18,240
左侧那个控制菜单

34
00:01:18,240 --> 00:01:21,860
他的菜单肯定是根据不同的角色来

35
00:01:21,860 --> 00:01:22,501
进入之后

36
00:01:22,501 --> 00:01:24,744
他是不同的权限是展示不同的菜单的

37
00:01:24,744 --> 00:01:26,858
所以说啊在这个时候我花了一点时间

38
00:01:26,858 --> 00:01:27,852
因为嗯

39
00:01:27,852 --> 00:01:29,582
我根据后端返回这个权限表

40
00:01:29,582 --> 00:01:32,401
来对比我本身已经写好的这个路由表

41
00:01:32,401 --> 00:01:34,388
来这两个对比之后生成一个

42
00:01:34,612 --> 00:01:36,855
隶属于这个用户的这个权限

43
00:01:37,047 --> 00:01:37,656
权限列表

44
00:01:37,656 --> 00:01:38,425
就是

45
00:01:38,489 --> 00:01:40,379
因为他提供一个 getRoutes? 这个路由吗

46
00:01:40,379 --> 00:01:41,148
是吧

47
00:01:42,814 --> 00:01:43,551
啊不是的

48
00:01:45,601 --> 00:01:47,780
就是那个 route 提供的 api

49
00:01:49,318 --> 00:01:50,343
嗯行好就是说

50
00:01:50,343 --> 00:01:52,330
你这个在这个权限菜单这里边

51
00:01:52,330 --> 00:01:55,117
花了不少时间。嗯对

52
00:01:58,225 --> 00:02:00,596
还有就是移动端适配

53
00:02:00,596 --> 00:02:02,454
因为他移动端

54
00:02:02,454 --> 00:02:03,640
调起来还是因为这个

55
00:02:03,640 --> 00:02:05,466
左侧的那个菜单也是我自己

56
00:02:05,498 --> 00:02:06,139
自己写的

57
00:02:06,139 --> 00:02:06,748
自己封装的

58
00:02:06,748 --> 00:02:09,247
所以说没有用那种组件库之类

59
00:02:09,247 --> 00:02:11,682
所以在移动端的时候

60
00:02:12,066 --> 00:02:12,995
就比较麻烦

61
00:02:13,027 --> 00:02:13,796
挑起来

62
00:02:14,405 --> 00:02:15,398
那只是麻烦

63
00:02:17,064 --> 00:02:20,396
嗯行好。这个就是有一个在线预览

64
00:02:20,396 --> 00:02:23,536
你这个在线预览已经502了啊

65
00:02:23,536 --> 00:02:26,035
因为我的身份证过期了，所以他凉了

66
00:02:29,207 --> 00:02:31,482
你这个我不会也是啊

67
00:02:31,482 --> 00:02:34,013
行好你可以部署在一些比如说 github.io

68
00:02:34,366 --> 00:02:35,968
一些什么之类

69
00:02:36,512 --> 00:02:38,435
嗯对这个我了解过

70
00:02:38,435 --> 00:02:41,799
但是还是暂时没往那边写。嗯行好

71
00:02:42,568 --> 00:02:43,914
啊那我就问你一些

72
00:02:43,914 --> 00:02:47,470
这里边的一些技术价吧嗯行好

73
00:02:47,470 --> 00:02:49,328
[问]那你说下你这个 menu 菜单

74
00:02:49,328 --> 00:02:50,354
他是怎么做的

75
00:02:50,354 --> 00:02:52,180
也就是刚才那个权限菜单

76
00:02:52,981 --> 00:02:55,480
嗯好因为我在做这个路由

77
00:02:55,672 --> 00:02:56,665
在在做这个路由的时候

78
00:02:56,665 --> 00:02:57,819
路由不是有个肉特斯

79
00:02:57,819 --> 00:02:58,780
他是不受阻吗

80
00:02:58,780 --> 00:03:00,830
里面会放我们各种各样的页面是吧

81
00:03:01,023 --> 00:03:02,593
然后我会给他加一个元信息

82
00:03:02,753 --> 00:03:04,996
元信息里面当然存储了这个菜单

83
00:03:04,996 --> 00:03:05,893
需要你拥有

84
00:03:05,893 --> 00:03:07,943
就是需要你后端返回来的个人信息

85
00:03:07,943 --> 00:03:09,289
里面拥有什么权限

86
00:03:09,353 --> 00:03:10,122
你比如说啊

87
00:03:10,122 --> 00:03:11,788
咱们打个比方的例子

88
00:03:11,788 --> 00:03:13,967
就是我们会有一个 markdown 是吧

89
00:03:14,159 --> 00:03:14,992
他会有个元信息

90
00:03:14,992 --> 00:03:15,312
也就是说

91
00:03:15,312 --> 00:03:17,235
他会有个原信息里面有个叫 permission

92
00:03:17,235 --> 00:03:18,164
一个自断 permas

93
00:03:18,164 --> 00:03:19,670
这个自断里面存储了他

94
00:03:19,734 --> 00:03:21,432
要求你这个用户是带什么

95
00:03:21,432 --> 00:03:24,412
权限的那有了这个标识之后啊

96
00:03:24,412 --> 00:03:26,526
我们在做那个假手机的时候我给大家

97
00:03:26,622 --> 00:03:27,263
比如说不同用户

98
00:03:27,263 --> 00:03:29,089
我带上他这个 pears 是吧

99
00:03:29,378 --> 00:03:29,987
啊 permission

100
00:03:29,987 --> 00:03:31,268
然后我

101
00:03:31,396 --> 00:03:33,959
呃在请求先我先我们先去请求他这个

102
00:03:34,024 --> 00:03:35,561
就先去请求他这个个人信息

103
00:03:35,561 --> 00:03:36,715
请求完个人信息之后

104
00:03:36,715 --> 00:03:37,996
我拿着他这个 permission

105
00:03:37,996 --> 00:03:39,566
然后和我这个路由

106
00:03:39,566 --> 00:03:41,649
就所有的这个路由接口来对比

107
00:03:42,001 --> 00:03:42,258
嗯

108
00:03:42,258 --> 00:03:44,565
他有的这些权限我会给他展示在左侧

109
00:03:44,597 --> 00:03:46,327
因为他会那个

110
00:03:46,327 --> 00:03:47,640
我不是说直接写好

111
00:03:47,640 --> 00:03:48,890
因为他有个 addRoute

112
00:03:49,178 --> 00:03:52,382
呃就是 route 的他这个提供 api 叫 

113
00:03:52,927 --> 00:03:53,696
addRoute

114
00:03:54,208 --> 00:03:55,875
就是他可以来添加我们的路由

115
00:03:55,907 --> 00:03:56,772
我不是说一上来

116
00:03:56,772 --> 00:03:58,310
就让他把所有的路由加载好

117
00:03:58,310 --> 00:04:00,809
我是通过 addRoute 的一个一个去添加的

118
00:04:00,809 --> 00:04:02,411
就是他

119
00:04:02,571 --> 00:04:03,756
哪些权限可以用

120
00:04:03,756 --> 00:04:04,942
我才让他添加进去

121
00:04:04,942 --> 00:04:06,255
是这个思路

122
00:04:07,377 --> 00:04:08,947
嗯行好

123
00:04:14,265 --> 00:04:15,323
这里面还有一个

124
00:04:15,643 --> 00:04:17,181
这里面还有一个 toastEditor

125
00:04:17,181 --> 00:04:18,559
这个是做什么的

126
00:04:18,911 --> 00:04:21,570
嗯 toastEditor 是用来写 markdown

127
00:04:21,570 --> 00:04:23,044
就是一个 markdown 编辑器

128
00:04:23,941 --> 00:04:25,415
他是一个 markdown 编辑器吗

129
00:04:26,825 --> 00:04:29,356
啊对我写当时写好就是 toastEditor

130
00:04:29,869 --> 00:04:31,438
一个马克档的编辑器吗

131
00:04:33,681 --> 00:04:34,674
嗯行好

132
00:04:34,674 --> 00:04:35,411
然后

133
00:04:35,411 --> 00:04:38,007
富文本也有，富文本用的是那个王矮点

134
00:04:40,346 --> 00:04:41,082
嗯好

135
00:04:41,082 --> 00:04:45,280
[问] unplugin-auto-import 是做什么的

136
00:04:46,433 --> 00:04:48,676
啊这个因为我们 vue3 里面他他用了

137
00:04:48,676 --> 00:04:49,124
我们用了

138
00:04:49,124 --> 00:04:50,694
我用了那个最新的 setup 

139
00:04:50,694 --> 00:04:52,585
然后我们就需要引不同的 api

140
00:04:52,585 --> 00:04:54,507
ref 呀

141
00:04:55,020 --> 00:04:57,647
或者说 reactive 啊什么之类的

142
00:04:57,647 --> 00:04:58,768
那我们需要导入的时候就

143
00:04:58,768 --> 00:05:00,306
比较麻烦然后我直接用了

144
00:05:00,402 --> 00:05:03,158
他提供有人写好的这个插件

145
00:05:03,158 --> 00:05:04,920
然后可以直接帮助我们

146
00:05:04,920 --> 00:05:06,201
我就不需要自己在手动导了

147
00:05:06,201 --> 00:05:06,970
等我们打包的时候

148
00:05:06,970 --> 00:05:08,188
他会自动帮我导进来

149
00:05:15,525 --> 00:05:16,935
嗯行好 (PS: 此处应该多问下原理)

150
00:05:21,004 --> 00:05:23,471
[问]你说下这个 mock 是怎么实现的吧

151
00:05:24,560 --> 00:05:26,226
嗯我 mock 是用的

152
00:05:26,258 --> 00:05:28,117
mock vite 的一个插件

153
00:05:28,117 --> 00:05:30,327
是用来帮助我们自动开启这个 mock

154
00:05:30,327 --> 00:05:32,378
就是自动开启这个 mock 服务的

155
00:05:32,378 --> 00:05:32,762
这样的话

156
00:05:32,762 --> 00:05:33,499
我就不需要自己在

157
00:05:33,499 --> 00:05:34,428
手动开一下这个 Mock

158
00:05:34,428 --> 00:05:36,030
是吧然后看完 Mock 之后

159
00:05:36,030 --> 00:05:37,600
这 Mock 直接就用那个官方文档

160
00:05:37,600 --> 00:05:38,401
说的那个

161
00:05:38,529 --> 00:05:39,330
实施力就行

162
00:05:39,362 --> 00:05:41,029
因为我们可里面现模拟的出去不多

163
00:05:41,029 --> 00:05:42,374
已经模拟了个用户的

164
00:05:42,406 --> 00:05:44,457
就是模拟了用户的那个个人信息

165
00:05:44,489 --> 00:05:46,924
还有一些权限，还有一个图片之类的

166
00:05:48,269 --> 00:05:51,057
[问]这里边分块打包是怎么做的

167
00:05:51,794 --> 00:05:53,172
分块打包是

168
00:05:53,268 --> 00:05:55,575
我在打包的时候就是在 v 的打包

169
00:05:55,575 --> 00:05:57,625
在 v 的坑配格里面配置的把一些

170
00:05:57,817 --> 00:05:59,900
no 的猫酒一些第三方模块来分出来

171
00:05:59,900 --> 00:06:02,399
分块来打包打包的就是呃

172
00:06:03,520 --> 00:06:04,642
那大概是这个意思

173
00:06:06,949 --> 00:06:10,569
好他这个基于什么去打包的

174
00:06:10,569 --> 00:06:12,011
就是比如说我们

175
00:06:14,222 --> 00:06:16,336
它是基于 rollup 打包

176
00:06:17,746 --> 00:06:20,053
嗯对所以这些应该都是一些基于

177
00:06:20,053 --> 00:06:21,463
rollup 的一些配置吧

178
00:06:21,719 --> 00:06:23,641
对对对。就是基于 rollup 的配置吧

179
00:06:23,641 --> 00:06:26,204
[问]那你说下这个分开打包的一些策略吧

180
00:06:27,358 --> 00:06:29,472
就比如说你刚才说到一些要分出去

181
00:06:29,472 --> 00:06:30,241
一些不分

182
00:06:30,241 --> 00:06:32,901
比如说哪些要分出去，哪些不分出去

183
00:06:34,150 --> 00:06:35,880
嗯因为我们这个打包的时候

184
00:06:35,880 --> 00:06:36,649
他最终打包的时候

185
00:06:36,649 --> 00:06:37,771
我们需要把他的什么呀

186
00:06:37,771 --> 00:06:39,885
把他的一些比较大的一些资源文件

187
00:06:40,013 --> 00:06:42,000
来换成 cdn 的方式来

188
00:06:42,320 --> 00:06:44,499
CDN 的方式来来引

189
00:06:44,531 --> 00:06:45,428
所以说会

190
00:06:45,428 --> 00:06:47,703
但是一些小一点的我们会流出来

191
00:06:47,767 --> 00:06:49,721
小一点的比如说呃

192
00:06:49,721 --> 00:06:50,619
漏弹式之类的

193
00:06:50,619 --> 00:06:52,669
就是漏弹式之类的我们用到他

194
00:06:52,733 --> 00:06:54,015
他一些来给他分出来

195
00:06:54,431 --> 00:06:55,392
比如说 Vue

196
00:06:55,425 --> 00:06:56,834
Vue 或者是这个 element-ui

197
00:06:56,834 --> 00:06:58,436
我们就不会给他采用

198
00:06:58,436 --> 00:06:59,397
把它依赖下下来的

199
00:06:59,397 --> 00:07:00,967
我们会用 cdn 的方式来引入

200
00:07:00,999 --> 00:07:02,698
这样会减少我们的体积吗

201
00:07:04,203 --> 00:07:06,574
嗯你那个应该不是分块打包吧

202
00:07:06,574 --> 00:07:08,112
比如说你把它分成很多块

203
00:07:08,112 --> 00:07:11,605
他这个很多块都是你由你自己去控制

204
00:07:11,605 --> 00:07:13,303
他们也都是比如说你自己有 CDN

205
00:07:13,495 --> 00:07:14,648
要么他们都在 CDN 上

206
00:07:14,648 --> 00:07:15,609
要么都不在

207
00:07:16,507 --> 00:07:18,237
他是这么种情况

208
00:07:20,031 --> 00:07:20,800
呃

209
00:07:21,377 --> 00:07:23,844
这个这个我还不太就

210
00:07:23,876 --> 00:07:24,997
反正我记得这个分块打包

211
00:07:24,997 --> 00:07:27,560
他是帮助我们把那个具体模块分出来

212
00:07:27,560 --> 00:07:28,906
然后 CDN 的话他肯定

213
00:07:29,130 --> 00:07:29,675
cdn 的话

214
00:07:29,675 --> 00:07:30,956
就已经不在这个依赖里面了

215
00:07:30,956 --> 00:07:32,174
它怎么会去打包

216
00:07:33,135 --> 00:07:34,289
嗯 (这应该是 external 的配置)

217
00:07:38,665 --> 00:07:40,587
对这个像 element-ui

218
00:07:40,587 --> 00:07:42,125
他比如说还有一些的

219
00:07:42,125 --> 00:07:43,951
他是那种不打包策略

220
00:07:43,951 --> 00:07:46,226
比如说 React/Vue 他这些都不打包

221
00:07:46,226 --> 00:07:48,821
他是以前的一种打包的方式

222
00:07:48,917 --> 00:07:50,551
就是说把它放在 CDN 上

223
00:07:50,551 --> 00:07:52,506
比如说我们在一些公用的 CDN 上

224
00:07:52,506 --> 00:07:54,492
然后我们就可以用这个库

225
00:07:54,781 --> 00:07:55,678
但是你这个

226
00:07:55,806 --> 00:07:57,472
分块打包应该不是这样子的

227
00:07:57,472 --> 00:07:59,266
它主要就是

228
00:08:00,035 --> 00:08:02,310
主要就是为了一些缓存的利用吧

229
00:08:02,310 --> 00:08:04,104
就是比如说一个大块都放到一个

230
00:08:04,104 --> 00:08:04,777
bundle.js 里边

231
00:08:04,777 --> 00:08:06,988
然后一行代码失效

232
00:08:06,988 --> 00:08:08,942
然后整个 bundle (缓存)就失效了

233
00:08:08,942 --> 00:08:10,864
然后你可以把它分为很多个 chunk

234
00:08:10,961 --> 00:08:13,139
这样子当你的这个代码失效

235
00:08:13,139 --> 00:08:13,908
只有它

236
00:08:14,613 --> 00:08:15,735
包含的这个 chunk

237
00:08:15,735 --> 00:08:17,913
他才会生效，生效的 chunk 都在好的

238
00:08:17,913 --> 00:08:19,836
而且你在这边也有你自己的 CDN

239
00:08:19,900 --> 00:08:20,765
因为我们上线的时候

240
00:08:20,765 --> 00:08:23,104
我们比如说一般有阿里云的 CDN

241
00:08:23,104 --> 00:08:24,481
有一些腾讯的 CDN

242
00:08:24,481 --> 00:08:26,564
我们都在我们自己的 CDN 上

243
00:08:26,564 --> 00:08:30,216
其实我们去公共的去利用他的那些

244
00:08:30,633 --> 00:08:31,882
element 或者

245
00:08:32,459 --> 00:08:34,253
vue/react 其实

246
00:08:34,670 --> 00:08:37,489
和利用我们自己的 CDN 它其实是一样的

247
00:08:37,489 --> 00:08:39,059
甚至利用我们自己的 CDN 也好

248
00:08:39,059 --> 00:08:41,014
因为我们自己 CDN 我们是可控的

249
00:08:41,014 --> 00:08:42,872
其他人的 CDN 是没办法控制的

250
00:08:42,872 --> 00:08:44,442
就是说不定哪一天他就挂了

251
00:08:44,442 --> 00:08:46,877
这个是很可怕的一个事情

252
00:08:47,454 --> 00:08:48,831
嗯对而且我这项目

253
00:08:48,831 --> 00:08:50,562
他之前用的时候是用的一个

254
00:08:50,562 --> 00:08:51,875
国外的一个图标库

255
00:08:51,875 --> 00:08:53,157
他图标库就挂了

256
00:08:53,157 --> 00:08:54,567
而且这个打包分快

257
00:08:54,567 --> 00:08:56,937
打包的话其实我在那个 webpack 中也是

258
00:08:57,386 --> 00:08:58,123
有用到过

259
00:08:58,123 --> 00:09:00,270
嗯所以说感觉用起来有点火了

260
00:09:00,270 --> 00:09:01,807
但是实际上我是知道这个外

261
00:09:01,872 --> 00:09:04,371
它这个打包可以帮我们把一些比较大

262
00:09:04,371 --> 00:09:05,652
体积比较大的 js 文件给大家

263
00:09:05,652 --> 00:09:06,581
给它拆封成

264
00:09:06,742 --> 00:09:07,831
嗯更小一点的模块

265
00:09:07,831 --> 00:09:09,946
或者说加一些特别小的一些

266
00:09:10,042 --> 00:09:11,131
这个 js 模块

267
00:09:11,131 --> 00:09:13,726
再合并成一个稍微稍微大一点点那种

268
00:09:14,111 --> 00:09:15,777
js 的那种模块

269
00:09:17,443 --> 00:09:19,205
嗯好对

270
00:09:19,205 --> 00:09:20,967
签证封号打包他应该

271
00:09:21,159 --> 00:09:23,402
是比如说把一些比较大的

272
00:09:23,402 --> 00:09:24,267
比如说像

273
00:09:24,492 --> 00:09:26,350
一些 echarts 呀那些给单独打开

274
00:09:26,350 --> 00:09:28,112
因为你刚开始去加载他他就特别大

275
00:09:28,133 --> 00:09:30,033
你又可以先加载一些一些基础的

276
00:09:30,227 --> 00:09:32,227
然后再慢慢去加载 echarts

277
00:09:32,233 --> 00:09:33,366
这些比较大的

278
00:09:33,399 --> 00:09:35,834
或者像是分路由的时候每一个路由

279
00:09:35,834 --> 00:09:36,891
然后一个创

280
00:09:36,891 --> 00:09:39,102
可然后或者是一些异步加载的

281
00:09:39,102 --> 00:09:40,704
做一些 chunk 之类的

282
00:09:40,704 --> 00:09:41,921
还有一些公共的

283
00:09:41,921 --> 00:09:44,356
公共的做一个公共的一个 chunk 之类的

284
00:09:44,356 --> 00:09:47,176
对但是他和你说那个为了一些 cdn

285
00:09:47,176 --> 00:09:50,155
然后那些 element 的他应该是这个

286
00:09:50,540 --> 00:09:52,654
不是为了这个这个目的

287
00:09:53,455 --> 00:09:56,467
啊行可能是我就记混了的

288
00:09:58,646 --> 00:10:01,401
嗯行好然后再看下你这个个人博

289
00:10:01,401 --> 00:10:02,491
客的这个项目

290
00:10:02,491 --> 00:10:05,150
你在这里面也写了一个后端是吧

291
00:10:05,694 --> 00:10:06,527
啊对

292
00:10:07,457 --> 00:10:08,386
嗯行好

293
00:10:08,386 --> 00:10:10,500
然后你这后端里边有个 passport 侧对

294
00:10:10,597 --> 00:10:14,345
[问]你可以说下 locol/jwt 这两个的区别吗

295
00:10:15,178 --> 00:10:17,357
嗯 local 的主要是针对于啥呀

296
00:10:17,357 --> 00:10:20,433
针对于就是当我们去用户来输入

297
00:10:20,433 --> 00:10:22,291
输入完成我们的这个信息之后

298
00:10:22,291 --> 00:10:24,662
我们要对他不是要对对他多些教验吗

299
00:10:24,854 --> 00:10:26,104
那这个 local 是主要是

300
00:10:26,136 --> 00:10:27,898
对于我们用户输入的这个信息

301
00:10:27,898 --> 00:10:30,173
就比如说他看他这个是否是存在啊

302
00:10:30,173 --> 00:10:30,910
在数据库里面

303
00:10:30,910 --> 00:10:33,249
以及对他这个账号密码做一个教验

304
00:10:33,249 --> 00:10:35,011
那 jwt 是主要是什么呢

305
00:10:35,043 --> 00:10:36,709
jwt 主要是用来

306
00:10:37,093 --> 00:10:39,240
就是啊当用户登录成功之后

307
00:10:39,240 --> 00:10:40,425
我们会把 token 返回给他

308
00:10:40,425 --> 00:10:42,476
那后续用户的这个请求

309
00:10:42,476 --> 00:10:43,693
都会带上我们这个 token

310
00:10:46,641 --> 00:10:47,250
校验完成之后

311
00:10:47,250 --> 00:10:49,204
如果说他是符合我们这个

312
00:10:49,204 --> 00:10:50,966
这个符合我们这个

313
00:10:50,966 --> 00:10:52,536
就是他这个 token 是正确的情况下

314
00:10:52,536 --> 00:10:54,395
我们会把他的 token 解析出来

315
00:10:54,395 --> 00:10:56,702
因为我们加密的时候会把他的 id 给他

316
00:10:56,862 --> 00:10:57,855
加密进去

317
00:10:57,855 --> 00:10:58,624
所以说他解密的时候

318
00:10:58,624 --> 00:11:00,194
也是会把他 id 解密出来

319
00:11:01,059 --> 00:11:03,206
是这个区别嗯行好

320
00:11:03,206 --> 00:11:04,904
那你说这加布贴的这个偷肯他

321
00:11:04,904 --> 00:11:05,705
是怎么生产的

322
00:11:05,705 --> 00:11:08,044
然后他教验的过程他是怎么教验的

323
00:11:08,973 --> 00:11:11,440
嗯好那这 wt 生成的话

324
00:11:11,472 --> 00:11:13,939
呃我当时是用的是奈斯提供的一个呃

325
00:11:13,939 --> 00:11:15,124
不是说奈斯提供的是

326
00:11:15,124 --> 00:11:16,438
当时是就是 nodejs

327
00:11:16,438 --> 00:11:17,976
有一个库叫做 json-webp-token 吧

328
00:11:22,461 --> 00:11:24,224
我有点忘了因为时间有点久了

329
00:11:24,320 --> 00:11:25,858
然后是运动裤加密完成之后

330
00:11:25,858 --> 00:11:27,588
因为我们需要把那个密码去散裂出来

331
00:11:27,588 --> 00:11:28,741
是吧嗯

332
00:11:28,741 --> 00:11:30,888
然后会有一个加密的密奥把它传进去

333
00:11:30,888 --> 00:11:31,561
然后散裂

334
00:11:31,561 --> 00:11:33,355
因为我们在 mongo 这个数据库的时候

335
00:11:33,355 --> 00:11:34,636
定义我们的数据表

336
00:11:34,733 --> 00:11:36,142
定义数据表的时候

337
00:11:36,687 --> 00:11:37,424
他是需要

338
00:11:37,424 --> 00:11:39,442
他是可以设置一个赛特的一个方法的

339
00:11:39,442 --> 00:11:40,756
这个赛的方法是用来

340
00:11:40,884 --> 00:11:43,031
就是当你有数据要设置的时候

341
00:11:43,031 --> 00:11:44,248
会走我这个赛的方法

342
00:11:44,248 --> 00:11:45,466
然后我要把你

343
00:11:45,466 --> 00:11:46,555
就是你要把你

344
00:11:46,555 --> 00:11:48,638
就是你要设置的数据给反了出来

345
00:11:48,638 --> 00:11:49,727
在这个在这个环节

346
00:11:49,727 --> 00:11:50,945
我们要把它做一个加密

347
00:11:52,482 --> 00:11:57,897
[问]jwt 它是怎么去教验这个数据是否合法的

348
00:11:59,531 --> 00:12:02,639
嗯当当就是当用户传递过来之后

349
00:12:02,639 --> 00:12:03,600
因为他的这个 topic

350
00:12:03,600 --> 00:12:04,914
是在这个请求头里面带的

351
00:12:04,914 --> 00:12:07,509
是吧那我们这个 gt 特策略

352
00:12:07,573 --> 00:12:08,759
就是为了就是

353
00:12:08,855 --> 00:12:10,777
在这个头请求头里面带上

354
00:12:10,777 --> 00:12:11,418
就是拿出来

355
00:12:11,418 --> 00:12:13,084
我们拿出来我们的这个 topic

356
00:12:13,084 --> 00:12:14,109
然后呃

357
00:12:14,109 --> 00:12:15,839
和我们之前就是在加密的时候

358
00:12:15,839 --> 00:12:17,089
去用的这个

359
00:12:17,089 --> 00:12:19,396
那个用的那个那个蜜药吧

360
00:12:19,396 --> 00:12:19,876
应该算是

361
00:12:19,876 --> 00:12:21,414
就是我们自己定义的一串

362
00:12:21,414 --> 00:12:22,504
自己定义的一串字符

363
00:12:22,504 --> 00:12:23,753
来给它解密出来

364
00:12:25,836 --> 00:12:27,694
嗯解灭出来吗

365
00:12:29,552 --> 00:12:31,667
呃啊对对

366
00:12:31,827 --> 00:12:36,120
[问]那你说下他 jwt 分为哪几部分

367
00:12:37,050 --> 00:12:38,844
哪几部分吗

368
00:12:42,496 --> 00:12:44,931
嗯这这道题他是一个字符串吧

369
00:12:44,931 --> 00:12:47,879
然后它里边是有两个小说点哦

370
00:12:47,879 --> 00:12:49,513
这个对啊对对啊

371
00:12:49,513 --> 00:12:50,827
知道想起来你

372
00:12:50,827 --> 00:12:52,365
你是指那个整个那个字符串

373
00:12:52,365 --> 00:12:53,550
他加密的把

374
00:12:53,550 --> 00:12:56,850
他是把哪些部分加密了是吧嗯对啊

375
00:12:57,395 --> 00:12:57,875
呃

376
00:12:57,875 --> 00:13:00,150
首先是你有你传的那个就你传的那个

377
00:13:00,150 --> 00:13:01,976
你自己定义的那一串字符是吧

378
00:13:02,040 --> 00:13:03,803
嗯其次的话还有什么呢还有你

379
00:13:03,899 --> 00:13:06,142
你因为我们加入的时候可能会把这个

380
00:13:06,142 --> 00:13:07,744
一般是把这个用户的 id 啊

381
00:13:07,744 --> 00:13:08,961
把用户的 id 给加密进去

382
00:13:08,961 --> 00:13:10,243
不会把密码上的就加密

383
00:13:10,243 --> 00:13:11,909
就会把就会把用户的 id 加密进去

384
00:13:11,909 --> 00:13:14,151
还有一个就是

385
00:13:14,151 --> 00:13:15,850
应该是这 wc 自己的东西了吧

386
00:13:15,850 --> 00:13:16,683
哎就是说啊

387
00:13:16,683 --> 00:13:19,118
我们自己设置的那那个自己写的那个

388
00:13:19,118 --> 00:13:19,887
随机随机的服

389
00:13:19,887 --> 00:13:21,264
就我们自己自己写的那个

390
00:13:21,264 --> 00:13:23,123
还有一个是我们自己设置的那个

391
00:13:23,123 --> 00:13:24,853
比如说 id 之类的这些

392
00:13:24,853 --> 00:13:27,480
然后其他就是他自己的一些东西吧

393
00:13:27,480 --> 00:13:28,794
行好呃

394
00:13:28,794 --> 00:13:30,428
我们在中间那个就叫 payload

395
00:13:30,428 --> 00:13:31,709
也是我们要加吗

396
00:13:32,062 --> 00:13:33,888
也就是我们的那些数据

397
00:13:33,952 --> 00:13:35,169
嗯那有一个问题

398
00:13:35,169 --> 00:13:36,259
就是说我们

399
00:13:36,419 --> 00:13:39,142
在前端是不是可以拿到这个数据

400
00:13:39,142 --> 00:13:40,072
里面内容

401
00:13:44,026 --> 00:13:45,852
作为我们自己标识的那个叫 be crab

402
00:13:49,280 --> 00:13:50,626
嗯有点忘了这

403
00:13:50,818 --> 00:13:53,926
这后轮好久没写有点忘了但是嗯

404
00:13:54,086 --> 00:13:56,777
哎大大大概都还记得一些嗯

405
00:13:56,777 --> 00:13:58,508
对对我刚才问题就是说

406
00:13:58,508 --> 00:14:00,750
里边中间那串数据叫 payload

407
00:14:00,750 --> 00:14:01,872
比如说就是刚才你说的

408
00:14:01,872 --> 00:14:03,762
我们要传一个又是 id 之类的

409
00:14:03,762 --> 00:14:04,691
就是我们在前呢

410
00:14:04,691 --> 00:14:07,030
是否可以直接把这个又是 id 给获取到

411
00:14:07,030 --> 00:14:08,824
我们要获取到的话如何把这段内容

412
00:14:08,824 --> 00:14:09,657
给获取到

413
00:14:11,452 --> 00:14:13,118
就我们前端要把这个

414
00:14:13,406 --> 00:14:15,328
刨坑里面这一段信息获取到吗

415
00:14:15,328 --> 00:14:18,789
嗯对或者是你把这个头啃扔给

416
00:14:19,205 --> 00:14:20,262
其他的随便一个人

417
00:14:20,262 --> 00:14:21,864
它是否能够把这个

418
00:14:21,961 --> 00:14:23,434
里边的信息给获取到

419
00:14:25,709 --> 00:14:27,600
当你只有你有我那个 becrypt 的时候

420
00:14:27,600 --> 00:14:28,433
你才能解密出来

421
00:14:28,433 --> 00:14:30,419
不然的话你就是不可能解密出来的

422
00:14:30,996 --> 00:14:31,893
嗯行好

423
00:14:31,893 --> 00:14:35,033
这个 gwt 他这个中间书写是可以

424
00:14:35,353 --> 00:14:36,250
嗯拿出来的

425
00:14:36,250 --> 00:14:38,301
就是任何人一个人都可以拿出来

426
00:14:38,301 --> 00:14:38,974
他 gwt

427
00:14:38,974 --> 00:14:41,857
他主要的是一个签名的一个验证

428
00:14:41,985 --> 00:14:44,004
他也不是说加密也不是说解密吧

429
00:14:44,004 --> 00:14:45,221
他应该是没有加密

430
00:14:45,894 --> 00:14:48,137
也不是说对这些数据进行加密

431
00:14:48,201 --> 00:14:49,547
他只不过是对这个

432
00:14:50,091 --> 00:14:51,629
数据进行一个签名

433
00:14:51,629 --> 00:14:52,398
然后每次

434
00:14:52,751 --> 00:14:54,769
去对这个数据再进行一次签名

435
00:14:54,769 --> 00:14:57,044
然后对比两次签名是否一致

436
00:14:57,044 --> 00:14:58,614
来判断他这个

437
00:14:58,902 --> 00:15:01,177
token 是否是合法

438
00:15:01,177 --> 00:15:02,715
是否是有效的

439
00:15:03,772 --> 00:15:05,054
哦

440
00:15:05,983 --> 00:15:08,674
好像是是这么回事

441
00:15:08,674 --> 00:15:10,885
好久没写确实有点忘了

442
00:15:10,885 --> 00:15:12,423
要不然你刚才也说了一句

443
00:15:12,423 --> 00:15:14,730
就是不要把密码放到这里边

444
00:15:14,826 --> 00:15:16,620
那既然他所有人都拿不到

445
00:15:16,620 --> 00:15:18,126
为什么不把密码放到那边

446
00:15:18,286 --> 00:15:19,055
还不是因为

447
00:15:19,055 --> 00:15:21,490
就是这些其实对于所有人都是可见的

448
00:15:21,490 --> 00:15:23,541
所以不要把这些敏感信息放到里边

449
00:15:24,117 --> 00:15:25,463
嗯嗯对

450
00:15:29,180 --> 00:15:30,429
嗯

451
00:15:34,524 --> 00:15:37,183
那问你几个基础问题吧

452
00:15:37,439 --> 00:15:38,433
嗯好

453
00:15:39,169 --> 00:15:44,264
[问]你说 vite 它的好处吧

454
00:15:44,488 --> 00:15:45,257
因为我看

455
00:15:45,257 --> 00:15:47,436
刚才看到你的那个脚手架是使用 vite

456
00:15:47,436 --> 00:15:49,102
去做的

457
00:15:50,063 --> 00:15:52,081
嗯好 vite 的好处味道

458
00:15:52,081 --> 00:15:53,908
嗯因为我们常用的都是 webapck

459
00:15:53,908 --> 00:15:54,420
因为

460
00:15:54,420 --> 00:15:56,439
用脚趾架也是基于那个 wific 来做的

461
00:15:56,439 --> 00:15:57,784
是吧那胃疼的话

462
00:15:58,073 --> 00:15:59,803
他的好处我觉得就是嗯

463
00:15:59,803 --> 00:16:01,309
他他的热更新非常快

464
00:16:01,309 --> 00:16:04,032
而且他是他是他和 wifi 的对比是哪种

465
00:16:04,032 --> 00:16:04,769
区别就是味道

466
00:16:04,769 --> 00:16:05,538
他不需要

467
00:16:05,858 --> 00:16:07,364
他在开发的时候他是直接

468
00:16:07,589 --> 00:16:09,767
将你这个呃给运行出来的

469
00:16:09,767 --> 00:16:12,042
而 vipik 是需要把他们打打包

470
00:16:12,042 --> 00:16:13,516
整成一个就是呃

471
00:16:13,516 --> 00:16:14,605
分析他们的依赖关系啊

472
00:16:14,605 --> 00:16:15,823
最后生成一个帮斗

473
00:16:15,823 --> 00:16:17,393
然后再开启这个服务

474
00:16:17,425 --> 00:16:18,418
那为他是不一样的

475
00:16:18,418 --> 00:16:20,084
为他是直接开启这个服务

476
00:16:20,148 --> 00:16:21,718
那当你开启服务之后

477
00:16:21,718 --> 00:16:23,000
你进入到这个网站

478
00:16:23,352 --> 00:16:25,883
他是1他是他主要是采用什么呢

479
00:16:25,883 --> 00:16:27,005
因为浏览器

480
00:16:27,645 --> 00:16:29,087
浏览器他是用的

481
00:16:29,504 --> 00:16:30,048
他是支持

482
00:16:30,048 --> 00:16:32,580
他只是直本来就他他就是识别那个

483
00:16:32,644 --> 00:16:33,637
呃 es 模块的

484
00:16:33,637 --> 00:16:34,854
就是嗯

485
00:16:35,527 --> 00:16:39,019
esp 的模块就是 xpod 的那种那种语法的

486
00:16:39,148 --> 00:16:41,422
所以说他到这个他他到浏览器之后

487
00:16:41,422 --> 00:16:43,249
他会根据你就是你加载的这个因变

488
00:16:43,249 --> 00:16:44,915
而按虚的去加载这个模块

489
00:16:44,915 --> 00:16:46,773
和 wifi 格他当然肯定不一样

490
00:16:46,773 --> 00:16:47,766
所以说他的 v

491
00:16:47,766 --> 00:16:49,528
他家就是在开发的时候很快

492
00:16:49,528 --> 00:16:50,682
但是我觉得 v 他吧

493
00:16:50,746 --> 00:16:53,918
他在打包的时候就不是很好

494
00:16:53,918 --> 00:16:56,289
因为他本身是用的 rollup 打包的

495
00:16:56,289 --> 00:16:58,307
rollup 的话适合小一点的用

496
00:17:00,806 --> 00:17:02,248
嗯好那

497
00:17:02,921 --> 00:17:04,875
vite 比如说他去加载这个模块

498
00:17:04,875 --> 00:17:06,253
设置使用 import

499
00:17:06,285 --> 00:17:08,752
import 去一个远程链接去加载

500
00:17:08,752 --> 00:17:10,258
比如它引破了一个 lodash

501
00:17:10,258 --> 00:17:11,283
然后发现 lodash

502
00:17:11,379 --> 00:17:13,142
他的所有的那些工具函数

503
00:17:13,142 --> 00:17:14,455
都是一些子模块

504
00:17:14,455 --> 00:17:16,057
比如说你去 import lodash

505
00:17:16,057 --> 00:17:17,018
然后 lodash

506
00:17:17,980 --> 00:17:21,055
lodash/index.js 有可能是一个

507
00:17:21,568 --> 00:17:22,625
就是一个入口文件

508
00:17:22,625 --> 00:17:24,452
然后这个入口文件再去往

509
00:17:24,484 --> 00:17:26,310
三四四五十个工件函数

510
00:17:26,310 --> 00:17:27,143
再去发气球

511
00:17:27,143 --> 00:17:28,585
那这样子他的性能

512
00:17:29,129 --> 00:17:30,027
他就会有点

513
00:17:30,027 --> 00:17:31,212
差就是他怎么去解决

514
00:17:31,212 --> 00:17:32,974
这个问题因为他发的都是

515
00:17:33,102 --> 00:17:34,640
比如说发七八十个小请求

516
00:17:34,640 --> 00:17:36,210
然后每个小请求都

517
00:17:36,434 --> 00:17:38,517
几个几百个自己这样子就

518
00:17:38,902 --> 00:17:40,664
有一些网络上的

519
00:17:40,824 --> 00:17:42,842
性能的浪费这个怎么去解决

520
00:17:44,733 --> 00:17:47,937
嗯就是指就是当我们用为他的时候他

521
00:17:48,097 --> 00:17:48,577
去比如说

522
00:17:48,577 --> 00:17:49,475
依赖到罗大神

523
00:17:49,475 --> 00:17:50,276
那种模块的时候

524
00:17:50,276 --> 00:17:52,134
因为罗大师会有很多的子模块

525
00:17:52,134 --> 00:17:53,127
就是说他会

526
00:17:53,127 --> 00:17:54,697
他要再去请求这些子模块的时候

527
00:17:54,697 --> 00:17:55,466
会比较

528
00:17:55,594 --> 00:17:58,285
呃消耗到自己的性格是吧嗯对

529
00:17:58,990 --> 00:17:59,919
嗯那我

530
00:17:59,919 --> 00:18:01,265
为他他因为他是他本身是按

531
00:18:01,265 --> 00:18:02,963
虚的就是你用到一些东西的时候

532
00:18:02,963 --> 00:18:04,277
他才会加载

533
00:18:06,263 --> 00:18:08,282
嗯用到的时候他才会加载

534
00:18:08,987 --> 00:18:10,589
嗯对就是他他的

535
00:18:10,621 --> 00:18:12,351
他的依赖因为因为看你要

536
00:18:12,351 --> 00:18:13,376
使用的那个依赖他

537
00:18:13,376 --> 00:18:14,562
依赖到你这个东西的时候

538
00:18:14,562 --> 00:18:16,035
他应该是才会去加载的

539
00:18:16,164 --> 00:18:18,086
嗯但是我们就是去引破他

540
00:18:18,086 --> 00:18:19,752
low 但是他就是用直接就

541
00:18:19,944 --> 00:18:22,219
是对不对哦对

542
00:18:23,693 --> 00:18:25,519
啊那这样的话应该是

543
00:18:25,679 --> 00:18:27,442
看你使用吧我觉得应该

544
00:18:27,698 --> 00:18:29,236
我觉得这样的话应该

545
00:18:30,037 --> 00:18:31,639
应该是应该是指指指

546
00:18:31,671 --> 00:18:32,440
指导这个卤蛋

547
00:18:32,440 --> 00:18:33,016
是这个模块

548
00:18:33,016 --> 00:18:34,715
当你用到其他的时候应该是再

549
00:18:34,715 --> 00:18:35,323
再去

550
00:18:35,323 --> 00:18:37,502
加载那些其他的依赖像吧小的依赖像

551
00:18:37,502 --> 00:18:38,463
嗯不是但是

552
00:18:38,463 --> 00:18:39,873
你用到 lodash 是这个模块的时候

553
00:18:39,873 --> 00:18:41,187
他你引泡的卤蛋

554
00:18:41,187 --> 00:18:42,628
是然后卤蛋是引带的 gs

555
00:18:42,628 --> 00:18:44,551
里边然后又会引泡的其他的

556
00:18:44,871 --> 00:18:46,089
对不对啊对啊就是

557
00:18:46,217 --> 00:18:46,986
当我们再

558
00:18:47,018 --> 00:18:49,453
再再再去用到其他的时候再去加载吗

559
00:18:49,613 --> 00:18:52,400
是是这个吗嗯应该不是这样子

560
00:18:53,330 --> 00:18:55,604
哦对因为你 import 的时候

561
00:18:55,604 --> 00:18:57,174
你也不知道他有没有用到

562
00:18:57,302 --> 00:18:58,168
对不对你

563
00:18:58,168 --> 00:19:00,763
import 的时候然后引 index.js

564
00:19:00,827 --> 00:19:02,429
都是一个都是一个表 (入口文件继续 import)

565
00:19:02,429 --> 00:19:04,127
上把所有都 import 过来了

566
00:19:04,127 --> 00:19:06,850
他肯定都要一个一个去 import 的才知道

567
00:19:14,732 --> 00:19:17,135
对他这个其实你可以做的话

568
00:19:17,135 --> 00:19:19,153
就比如说 import lodash/get

569
00:19:19,250 --> 00:19:20,659
那么他就会直接去 lodash

570
00:19:20,659 --> 00:19:21,941
/get 那个去找

571
00:19:21,941 --> 00:19:24,248
但这个对于 vite 也做了一些依赖

572
00:19:24,248 --> 00:19:25,690
预加载的一个优化吧

573
00:19:25,690 --> 00:19:27,003
这个下去可以看一看

574
00:19:27,676 --> 00:19:30,624
嗯好对这个问的还是比较多的

575
00:19:31,425 --> 00:19:32,963
行依赖安于家长

576
00:19:33,860 --> 00:19:36,423
这个就在他的一些官方文档上

577
00:19:36,423 --> 00:19:37,736
就有这个东西

578
00:19:38,441 --> 00:19:40,620
那可能平时不太注意这些东西

579
00:19:40,652 --> 00:19:41,998
嗯行好

580
00:19:45,874 --> 00:19:48,341
[问]说一下长期缓存的一个优化吧嗯

581
00:19:51,994 --> 00:19:53,788
你先说下强缓存

582
00:19:54,333 --> 00:19:56,255
强缓存和协商缓存的区别

583
00:20:01,414 --> 00:20:02,407
啊这这这

584
00:20:02,503 --> 00:20:03,913
这个我没有了解过哎

585
00:20:04,297 --> 00:20:05,931
就是你说的那个墙缓存

586
00:20:05,931 --> 00:20:07,469
或者什么什么缓存的

587
00:20:07,629 --> 00:20:11,602
嗯行好对这个有可能呃好

588
00:20:11,602 --> 00:20:13,140
那我问的再具体一点

589
00:20:13,140 --> 00:20:14,582
就是也有一个开始啃串

590
00:20:14,582 --> 00:20:16,600
这知道这个自然它是做什么的吗

591
00:20:18,811 --> 00:20:20,669
太赤开始啃串

592
00:20:20,669 --> 00:20:23,265
就是后端有一个开始啃串的一个自断

593
00:20:26,020 --> 00:20:28,743
哎这个好像是缓存的吧应该是嗯对

594
00:20:29,865 --> 00:20:32,011
啊太适合了

595
00:20:33,165 --> 00:20:34,510
应该应该是缓存的

596
00:20:35,440 --> 00:20:37,682
嗯但是这个我不不太了解不太了解

597
00:20:37,682 --> 00:20:39,028
我知道有一个什么 keep alive

598
00:20:39,509 --> 00:20:41,527
就是关于 cp 1.1的那个

599
00:20:42,104 --> 00:20:43,930
那个是保持链接的一个东西

600
00:20:44,154 --> 00:20:45,884
啊保保持链接的是

601
00:20:46,109 --> 00:20:48,384
嗯这个开始很重要不知道行

602
00:20:48,384 --> 00:20:49,921
那你下去的时候可以问下

603
00:20:49,921 --> 00:20:51,139
开始很重要这些东西

604
00:20:51,139 --> 00:20:52,613
对因为你现在才大二

605
00:20:52,613 --> 00:20:55,080
其实这些现在看还来得及

606
00:20:55,080 --> 00:20:56,137
这些是八股文

607
00:20:56,778 --> 00:20:58,925
这个虽然他也是八股文但是他

608
00:20:59,758 --> 00:21:00,847
不仅对面是有帮助

609
00:21:00,847 --> 00:21:03,218
且对于你以后的这个

610
00:21:04,083 --> 00:21:06,710
平时的这些写代码也很有帮助

611
00:21:06,710 --> 00:21:07,928
比如说刚才那个

612
00:21:07,960 --> 00:21:10,106
你说的那个分块打包策略

613
00:21:10,106 --> 00:21:12,413
他主要就是为了一个强缓存的一个优化

614
00:21:14,272 --> 00:21:17,636
哦哦好我记得好像这些有有见过

615
00:21:17,636 --> 00:21:18,629
但是好像没记啊

616
00:21:18,629 --> 00:21:19,590
没仔细记

617
00:21:20,423 --> 00:21:22,185
嗯对

618
00:21:22,442 --> 00:21:23,755
好那我再问你一个问题

619
00:21:23,755 --> 00:21:25,485
就是说我们打包下来的时候

620
00:21:25,646 --> 00:21:28,593
那些静态资源他都是带一个 hash 值

621
00:21:28,593 --> 00:21:32,438
比如说叫比如说一个应用叫 app.js

622
00:21:32,438 --> 00:21:33,880
我们打包出来一般叫

623
00:21:34,264 --> 00:21:37,180
app.xxxxxxxx.js

624
00:21:37,180 --> 00:21:39,327
然后里边就是一个带一个哈希

625
00:21:39,327 --> 00:21:41,089
我们为什么要带这个哈希

626
00:21:44,869 --> 00:21:46,023
这是打包出来之后

627
00:21:46,023 --> 00:21:48,426
他的文件会带一些一堆hash值

628
00:21:48,810 --> 00:21:49,579
对

629
00:21:52,206 --> 00:21:53,616
他带这些 hash 值的意义

630
00:21:53,616 --> 00:21:55,090
他不带会怎么样

631
00:21:59,159 --> 00:22:00,152
不太不太了解

632
00:22:00,921 --> 00:22:03,420
感觉这些好多东西都没

633
00:22:03,452 --> 00:22:04,702
没有听说过呀

634
00:22:05,663 --> 00:22:09,636
嗯行好，这个其实也是一个

635
00:22:09,828 --> 00:22:12,295
都是关于前端工程化的是吧

636
00:22:12,295 --> 00:22:14,987
也是缓存一类的是吗

637
00:22:16,685 --> 00:22:18,767
应该就是是是不是指他开发依赖

638
00:22:18,767 --> 00:22:20,401
就是说他启动服务之后

639
00:22:20,529 --> 00:22:22,644
呃就是呃

640
00:22:22,996 --> 00:22:24,887
因为我们打包好一个东西之后

641
00:22:25,079 --> 00:22:27,033
当我们就是触发了这个更新之后

642
00:22:27,033 --> 00:22:28,251
他是不是会有缓存之类的

643
00:22:28,251 --> 00:22:29,436
然后会会会

644
00:22:29,436 --> 00:22:32,096
因为这个缓会是缓存这一方面的东西

645
00:22:32,640 --> 00:22:33,794
嗯对

646
00:22:34,691 --> 00:22:37,030
对他这些都是缓存方面一个东西

647
00:22:37,094 --> 00:22:38,472
包括刚才那个分块打包

648
00:22:38,472 --> 00:22:39,016
他其实

649
00:22:39,016 --> 00:22:42,028
一定程度上也是一个缓存的一个东西

650
00:22:42,092 --> 00:22:42,861
对他

651
00:22:43,021 --> 00:22:45,488
分块打包他有一些性能上的一些考虑

652
00:22:45,488 --> 00:22:47,699
就是比如说让你加载更小的体积

653
00:22:47,699 --> 00:22:49,173
比如说其他路由的我就不加载

654
00:22:49,173 --> 00:22:50,134
但是他其实

655
00:22:50,166 --> 00:22:51,640
比如说当你只有整个

656
00:22:51,640 --> 00:22:53,466
页面只有一个路由的时候

657
00:22:53,915 --> 00:22:55,677
后胎其实也会分为一场

658
00:22:55,677 --> 00:22:57,311
很多个块很多个 chunk

659
00:22:57,311 --> 00:23:00,835
他这其实就是有一些缓存的一些考虑

660
00:23:01,636 --> 00:23:02,405
嗯

661
00:23:02,950 --> 00:23:05,929
好好感感觉就是前段工程化这一块

662
00:23:05,929 --> 00:23:07,403
好多东西其实

663
00:23:07,788 --> 00:23:08,909
没没咋了解

664
00:23:09,774 --> 00:23:12,626
嗯对你这个简历上面其实

665
00:23:12,850 --> 00:23:16,246
应该对你这里边有一个前端脚手架

666
00:23:16,246 --> 00:23:17,656
你做这个前端脚手架的话

667
00:23:17,656 --> 00:23:18,361
这些

668
00:23:18,361 --> 00:23:21,437
缓存配置就是你要考虑的这些内容

669
00:23:22,750 --> 00:23:23,744
哦对

670
00:23:23,744 --> 00:23:25,858
就这个东西是大部分要考虑的是

671
00:23:25,858 --> 00:23:27,973
对对对比如说

672
00:23:27,973 --> 00:23:29,671
比如说我为什么要带一个哈吸值

673
00:23:29,671 --> 00:23:31,657
因为这是我们刚开始外派克

674
00:23:31,657 --> 00:23:32,747
他刚开始出来

675
00:23:32,747 --> 00:23:35,342
他就有这么一个很强的一个功能

676
00:23:36,271 --> 00:23:38,418
啊好对

677
00:23:41,871 --> 00:23:44,435
好然后你在这里边使用 pinia

678
00:23:45,364 --> 00:23:51,664
[问]然后你说下这 pinia 状态库的一个原理吧

679
00:23:53,886 --> 00:23:55,680
刚才不他是拼点的原理是吗

680
00:23:55,680 --> 00:23:58,051
嗯对就是他怎么去做一些

681
00:23:58,404 --> 00:23:59,653
状态的管理的

682
00:24:00,422 --> 00:24:01,672
其实在 vue3 里面

683
00:24:01,672 --> 00:24:03,434
他的状态管理有了很就是

684
00:24:03,466 --> 00:24:04,812
其实我们不用 pinia

685
00:24:04,812 --> 00:24:07,022
他也可以实现状态管理

686
00:24:07,087 --> 00:24:08,977
这个就是用过 vue3 的应该是知道的啊

687
00:24:08,977 --> 00:24:10,739
我们完全可以自己定一个 ref

688
00:24:10,995 --> 00:24:12,726
首先或者说 reactive 属性

689
00:24:12,726 --> 00:24:14,808
把他们抽出来抽到一个 js 文件里面

690
00:24:14,936 --> 00:24:16,378
然后我们哪些地方用到他

691
00:24:16,378 --> 00:24:17,499
我们哪些地方再去

692
00:24:17,692 --> 00:24:19,133
引入他改他就可以了

693
00:24:19,358 --> 00:24:20,351
然后 penia 的话

694
00:24:20,351 --> 00:24:23,170
我觉得 pinia 诞生一方面是因为他

695
00:24:23,235 --> 00:24:25,221
因为他是 vuex 的官方做

696
00:24:25,221 --> 00:24:26,374
官方那个团队写的嘛

697
00:24:26,374 --> 00:24:28,265
而且是比较轻量的

698
00:24:28,393 --> 00:24:30,860
因为它里面阉割了很多东西啊

699
00:24:30,860 --> 00:24:33,455
比如说他没有 vuex 里面的

700
00:24:38,399 --> 00:24:40,450
我觉得他是他的这个

701
00:24:40,898 --> 00:24:43,173
还是说为了帮助我们更好的更更方便

702
00:24:43,173 --> 00:24:45,544
就是分块就能够更方便的让我

703
00:24:45,608 --> 00:24:46,793
让我们把它给提取出来

704
00:24:46,793 --> 00:24:48,748
就是把一些公共的一些状态

705
00:24:48,748 --> 00:24:49,709
把它们拿出来

706
00:24:49,837 --> 00:24:51,567
然后给他设置一个具体的名字

707
00:24:51,567 --> 00:24:52,849
因为皮尼亚里面是 define 的时候

708
00:24:52,849 --> 00:24:54,002
需要定一个名字是吧

709
00:24:54,098 --> 00:24:56,405
然后把他们一些某一块的一个状态

710
00:24:56,405 --> 00:24:57,270
给他取出来

711
00:24:57,270 --> 00:24:58,936
当然他提供一个 action

712
00:24:59,385 --> 00:25:01,403
可以用也可以不用我觉得我不用 action

713
00:25:01,403 --> 00:25:03,871
我直接改 state 的数据也可以改

714
00:25:03,871 --> 00:25:04,319
题目艾克是

715
00:25:04,319 --> 00:25:06,113
我觉得可能是他想遵循那个

716
00:25:06,209 --> 00:25:08,228
一个单向的那么一个数据流吧

717
00:25:08,228 --> 00:25:10,439
就是和 vuex 那个原原理式的

718
00:25:10,439 --> 00:25:11,208
vuex 原理是

719
00:25:11,208 --> 00:25:13,418
就是只能通过 mutation 来改这个 state

720
00:25:14,764 --> 00:25:17,583
嗯行好那你说下 vue3 相当于 vue 2

721
00:25:17,583 --> 00:25:18,929
他新增了什么东西

722
00:25:23,511 --> 00:25:24,248
尤其也说了

723
00:25:26,266 --> 00:25:27,836
不管是性能还是什么东西

724
00:25:28,285 --> 00:25:30,015
那 vue3 的话

725
00:25:30,015 --> 00:25:32,322
首先是从这个首先是由呃

726
00:25:35,237 --> 00:25:35,910
这是一方面

727
00:25:35,910 --> 00:25:37,512
然后最大的改动就是这个

728
00:25:37,512 --> 00:25:39,242
然后其次就是说他的咸阳市

729
00:25:39,434 --> 00:25:41,581
也就是说他的咸阳市由那个迪范

730
00:25:41,805 --> 00:25:45,490
欧布展开的 define property 改成了 proxy 1 s 6

731
00:25:45,490 --> 00:25:46,419
proxy 出去

732
00:25:46,483 --> 00:25:48,341
出去劫持嗯

733
00:25:48,534 --> 00:25:50,616
更好的可以来响应这个数据

734
00:25:50,616 --> 00:25:51,962
这个双向数据绑定了

735
00:25:51,994 --> 00:25:54,237
然后还有的就是呃

736
00:25:54,653 --> 00:25:57,253
新增的一些贴就是 watch effect 的之类的

737
00:25:58,114 --> 00:25:59,235
嗯好

738
00:25:59,427 --> 00:26:02,343
嗯你了解他关于 vcdom 的一些优化吗

739
00:26:04,105 --> 00:26:05,835
啊虚拟数是吧虚拟

740
00:26:06,059 --> 00:26:07,950
虚拟到无数是吧嗯对

741
00:26:08,526 --> 00:26:09,712
啊这这个不太了解

742
00:26:09,712 --> 00:26:12,115
但是我知道他对地府就是地府

743
00:26:12,147 --> 00:26:14,358
算法也有也有一点增强吧好像是什么

744
00:26:14,358 --> 00:26:15,703
好像是加了几个那个

745
00:26:15,703 --> 00:26:18,010
加了几个 k 吧应该是我记得好像是

746
00:26:18,010 --> 00:26:19,484
但是我不不了解这一块

747
00:26:21,631 --> 00:26:25,123
嗯行好他加了一些静态节点吧相当于

748
00:26:25,860 --> 00:26:27,174
嗯没收到吗是吗

749
00:26:27,622 --> 00:26:30,570
嗯对就比如说有一些

750
00:26:31,371 --> 00:26:32,588
有一些虚拟节点

751
00:26:32,588 --> 00:26:35,632
以前比如说是一个 div hello 腕的

752
00:26:38,067 --> 00:26:38,387
他是不是

753
00:26:38,387 --> 00:26:38,932
我记得好像是

754
00:26:38,932 --> 00:26:39,284
好像

755
00:26:39,284 --> 00:26:41,559
是不是把他那个节点换成那个 frigament

756
00:26:41,559 --> 00:26:43,546
了就是 create ferr element frigman

757
00:26:43,546 --> 00:26:44,795
他那个虚拟节点

758
00:26:45,244 --> 00:26:46,141
让不太了解

759
00:26:47,807 --> 00:26:50,178
嗯就相当于以前有一些

760
00:26:50,466 --> 00:26:52,228
静态的一些节点吧

761
00:26:52,228 --> 00:26:53,286
他以前是一个节点

762
00:26:53,286 --> 00:26:54,856
然后来说酒店是一个自负串

763
00:26:54,856 --> 00:26:56,810
就相当于他节点少了很多

764
00:26:56,938 --> 00:26:58,829
做盗墓地府也少了很多

765
00:26:59,630 --> 00:27:01,264
啊就是这个必须盗墓是吧

766
00:27:01,264 --> 00:27:03,314
好那我们下去再看看

767
00:27:04,307 --> 00:27:05,749
嗯行好

768
00:27:07,607 --> 00:27:10,395
行那这次面试就到这里吧

769
00:27:11,036 --> 00:27:12,285
嗯好

770
00:27:21,641 --> 00:27:23,499
哎应该没有问 js

771
00:27:24,460 --> 00:27:28,497
嗯 js，那我问你一个几个 js 再结束吧

772
00:27:29,138 --> 00:27:30,195
啊好

773
00:27:31,253 --> 00:27:32,022
嗯

774
00:27:34,200 --> 00:27:35,770
啊我最下面简历的最下面

775
00:27:35,834 --> 00:27:39,231
是有那个就是技术栈啊什么之类的

776
00:27:40,736 --> 00:27:41,890
嗯行好

777
00:27:43,171 --> 00:27:43,620
行

778
00:27:43,620 --> 00:27:45,991
那我现在看到你下边有一个掌握技能

779
00:27:45,991 --> 00:27:48,554
然后根据这些再问你几个问题吧

780
00:27:49,195 --> 00:27:50,188
嗯好

781
00:27:53,953 --> 00:27:57,386
[问]那你如何生成一个含有100个数组然后

782
00:27:57,638 --> 00:27:58,887
然后每一个

783
00:27:58,887 --> 00:28:02,027
数组的每一项都是1的这样一个数组

784
00:28:04,046 --> 00:28:05,199
嗯你有一个 Array

785
00:28:05,199 --> 00:28:06,352
然后里面放一个100

786
00:28:06,352 --> 00:28:08,115
然后 fill 填充一下就行

787
00:28:18,015 --> 00:28:19,136
然后还有别的就

788
00:28:19,136 --> 00:28:21,347
是要还是 new Array 然后换成个 map

789
00:28:21,347 --> 00:28:23,846
然后取他个取他个索引

790
00:28:23,846 --> 00:28:24,935
把死分返回出来

791
00:28:24,935 --> 00:28:25,768
这也可以

792
00:28:26,602 --> 00:28:28,588
当然 fill 肯定更合适

793
00:28:30,959 --> 00:28:32,144
嗯行好

794
00:28:38,969 --> 00:28:40,667
如何实现一个 sleep

795
00:28:41,147 --> 00:28:43,006
[问]如何实现一个异步的 sleep

796
00:28:44,672 --> 00:28:46,562
sleep 嗯对

797
00:28:46,562 --> 00:28:48,132
比如说 sleep 3000

798
00:28:48,132 --> 00:28:50,984
就是3秒之后再去 sleep(3000).then

799
00:28:50,984 --> 00:28:51,913
就是3秒之后

800
00:28:51,913 --> 00:28:53,867
再去执行 then 里边的一个东西

801
00:28:53,931 --> 00:28:56,206
就如何实现这么一个 sleep 函数

802
00:28:58,193 --> 00:28:59,442
嗯实现一个函数

803
00:28:59,442 --> 00:29:00,660
然后这个函数里面是

804
00:29:00,756 --> 00:29:02,294
3秒之后里面东西在执行

805
00:29:02,294 --> 00:29:04,921
是吗嗯对比如 sleep(300)

806
00:29:04,985 --> 00:29:07,196
然后就就是等 3000 毫秒之后

807
00:29:07,196 --> 00:29:08,862
再去执行赞里面的东西

808
00:29:09,919 --> 00:29:12,546
哦那写个函数然后里面放一个呃

809
00:29:12,610 --> 00:29:14,501
里面直接写个塞泰亚不就可以了

810
00:29:14,789 --> 00:29:15,398
写个塞泰亚坡

811
00:29:15,398 --> 00:29:17,769
然后把那个时间换成你是

812
00:29:17,769 --> 00:29:19,403
是换成你接收的那个仓储敌类

813
00:29:19,403 --> 00:29:21,549
然后把你具体要执行的东西

814
00:29:21,549 --> 00:29:22,511
放到那个塞泰亚那里面

815
00:29:22,511 --> 00:29:23,440
不就可以了吗

816
00:29:23,824 --> 00:29:26,580
当然这是用的那个当然这是那个呃

817
00:29:26,580 --> 00:29:28,310
红任务你用微任务

818
00:29:28,310 --> 00:29:30,104
用那个 promiss 其实也可以实现

819
00:29:30,104 --> 00:29:32,475
乌黑就是微任务里面再包个其他的

820
00:29:34,814 --> 00:29:36,352
嗯这其实对

821
00:29:36,352 --> 00:29:37,922
这其实是使用保密斯和

822
00:29:37,922 --> 00:29:39,620
塞泰曼奥特去包一个

823
00:29:39,780 --> 00:29:40,869
然后塞泰曼奥特

824
00:29:40,997 --> 00:29:42,535
里边那回电话还说完了

825
00:29:42,535 --> 00:29:43,657
直接去 reserve 直

826
00:29:44,233 --> 00:29:47,021
直接去 reserve 就可以嗯对

827
00:29:51,410 --> 00:29:54,807
[问]你说一下如何去实现跨域吧

828
00:29:55,447 --> 00:29:56,409
嗯好

829
00:29:56,537 --> 00:29:59,645
跨域的话前端和后端，前端的话

830
00:29:59,645 --> 00:30:00,830
我们可以通过配置

831
00:30:00,830 --> 00:30:02,080
咱们使用比如说教授级吧

832
00:30:02,080 --> 00:30:03,521
我们可以配置里面的 proxy

833
00:30:03,521 --> 00:30:05,956
来设置一个代理来代理服务器

834
00:30:06,149 --> 00:30:07,014
然后其他的方式

835
00:30:07,014 --> 00:30:08,872
就是比如说之前很早之前

836
00:30:09,000 --> 00:30:10,250
很早之前用的那种

837
00:30:10,378 --> 00:30:12,781
话语就是用 jcp 在 squap 的标签里面

838
00:30:12,909 --> 00:30:13,934
嗯写个 url

839
00:30:13,934 --> 00:30:16,113
然后再再写个 squap 的标签写个函数

840
00:30:16,113 --> 00:30:16,882
然后给他

841
00:30:16,914 --> 00:30:19,221
但是他这个 jcp 只支持 get 请求

842
00:30:19,445 --> 00:30:20,054
只是 get 请

843
00:30:20,054 --> 00:30:23,162
而且还需要服务到那边去配置一下

844
00:30:23,418 --> 00:30:24,892
嗯除了这个纸之外

845
00:30:24,956 --> 00:30:27,263
前端好像没啥能处理跨越不是说没啥

846
00:30:27,263 --> 00:30:29,057
就是我不太不太知道别的

847
00:30:29,089 --> 00:30:30,403
然后呢处理跨越的话

848
00:30:30,403 --> 00:30:31,172
我们可以

849
00:30:31,204 --> 00:30:33,703
安装一个 cosr 的一个第三方的包

850
00:30:33,703 --> 00:30:36,170
然后来直接使用这个中间键就可以

851
00:30:36,362 --> 00:30:38,477
还有的话就可以手动来设置

852
00:30:38,477 --> 00:30:41,296
比如设置那个啊阿克塞斯

853
00:30:41,392 --> 00:30:43,026
AccessControlAllowOrigin

854
00:30:43,283 --> 00:30:43,923
可以设置个 * 

855
00:30:43,923 --> 00:30:45,525
但是我是不建议设置成 * 了

856
00:30:45,525 --> 00:30:46,679
因为设置成 * 的话

857
00:30:46,935 --> 00:30:48,601
呃就见到的是所有人都可以放完了

858
00:30:48,601 --> 00:30:49,402
这样不太好

859
00:30:49,434 --> 00:30:51,805
所以建议把那个星换成自己的那个

860
00:30:51,805 --> 00:30:53,343
自己的那个在线的网址

861
00:30:53,535 --> 00:30:56,323
嗯然后还有处理的话就是 ngx 吧

862
00:30:56,387 --> 00:30:57,636
当然这块不知道

863
00:30:57,668 --> 00:30:59,751
这块只是知道 nginx 可以处理

864
00:31:00,808 --> 00:31:04,044
这次那个其实是怎么说

865
00:31:04,044 --> 00:31:05,806
其实也算是一个

866
00:31:06,383 --> 00:31:07,440
假的处理

867
00:31:07,440 --> 00:31:09,779
这次就是就是把跨域的问题解决掉

868
00:31:09,843 --> 00:31:11,990
就是把跨域的一个问题改成一个

869
00:31:11,990 --> 00:31:13,304
统一的一个问题

870
00:31:13,656 --> 00:31:15,514
就是比如说你以前是使用

871
00:31:15,803 --> 00:31:17,180
某一个

872
00:31:17,309 --> 00:31:20,032
就是某一个后端的干扰 epi 吧然后就

873
00:31:20,192 --> 00:31:22,627
现在就是去直接去启用干扰 epi

874
00:31:22,627 --> 00:31:25,062
然后安全里边再把干扰 epi

875
00:31:25,062 --> 00:31:27,433
去带领到其他的 survey

876
00:31:28,715 --> 00:31:29,836
嗯好

877
00:31:29,964 --> 00:31:32,656
对他这个按这个字属于服务短了吧

878
00:31:33,008 --> 00:31:33,777
嗯行吧

879
00:31:33,809 --> 00:31:36,308
[问]如何取消请求的发送

880
00:31:37,622 --> 00:31:40,249
啊中断请求是吗嗯

881
00:31:41,274 --> 00:31:42,620
这中断请求的话

882
00:31:43,613 --> 00:31:48,067
应该哎我我记得 axios 应该应该是

883
00:31:48,067 --> 00:31:49,167
可以被中断的吧

884
00:31:49,400 --> 00:31:51,100
这个没有试过，就没有

885
00:31:51,110 --> 00:31:52,905
做过这个中断请求

886
00:31:54,090 --> 00:31:55,980
但是我但是我还我见过有人

887
00:31:55,999 --> 00:31:58,399
是有人在文章中发过这种终端请求的

888
00:31:58,666 --> 00:32:01,133
就是关于后台就用 no 的来终端请求

889
00:32:01,844 --> 00:32:04,054
呃但是我没有做过自己没有做过

890
00:32:04,855 --> 00:32:06,201
嗯对

891
00:32:06,201 --> 00:32:07,547
他其实出了一个新的 api

892
00:32:07,547 --> 00:32:08,476
叫 AbortControl API

893
00:32:08,476 --> 00:32:09,661
然后这个可以去

894
00:32:09,661 --> 00:32:11,584
做一下终端请求的一个东西

895
00:32:12,929 --> 00:32:14,788
嗯好对

896
00:32:15,012 --> 00:32:17,351
AbortControl 嗯对

897
00:32:18,600 --> 00:32:20,811
他是一个新出的一个 api 吧

898
00:32:21,836 --> 00:32:24,335
哦这些东西好多呢

899
00:32:24,976 --> 00:32:26,194
我都没有见过

900
00:32:26,290 --> 00:32:29,974
[问]如何去预防 xss 攻击

901
00:32:31,480 --> 00:32:33,274
xss 吗

902
00:32:34,075 --> 00:32:35,902
好像是用一个三个字母那个

903
00:32:35,902 --> 00:32:37,151
在那个拥有一个什么

904
00:32:37,408 --> 00:32:38,593
好像是一种方案吧

905
00:32:38,593 --> 00:32:40,323
是一个三个字母来说

906
00:32:41,124 --> 00:32:43,431
我记得好像是 xss 可以预防那个

907
00:32:46,251 --> 00:32:47,660
是好像是吧我不带

908
00:32:47,724 --> 00:32:50,223
我我也不知道没没有做过这种东西嗯

909
00:32:50,223 --> 00:32:53,235
他叫 csp

910
00:32:53,427 --> 00:32:54,357
除了这种策略

911
00:32:54,357 --> 00:32:56,856
他还有其他的方式去防止这个

912
00:32:57,080 --> 00:32:58,554
xss 攻击

913
00:32:59,227 --> 00:33:00,028
啊

914
00:33:00,989 --> 00:33:02,591
这些就是一般就是呃

915
00:33:02,591 --> 00:33:04,033
大厂比较容易问这些

916
00:33:04,033 --> 00:33:05,731
之前还有之前那些东西是吗

917
00:33:06,147 --> 00:33:07,108
嗯对

918
00:33:07,845 --> 00:33:08,678
哦

919
00:33:10,344 --> 00:33:13,997
对 csp 就是一个一个就是转移吧

920
00:33:16,111 --> 00:33:17,681
一个就是转译

921
00:33:17,681 --> 00:33:20,597
然后就可以防止这种 xss 攻击

922
00:33:20,661 --> 00:33:21,718
然后一种就是

923
00:33:22,071 --> 00:33:24,538
csp 是一个最好的一个策略吧

924
00:33:24,538 --> 00:33:26,909
他从根本上就可以防止

925
00:33:28,158 --> 00:33:30,177
这个别人去注入脚本

926
00:33:30,177 --> 00:33:32,003
他是一个叫内容安全策略

927
00:33:32,131 --> 00:33:35,367
他可以用允许就是这个网站只允许

928
00:33:35,944 --> 00:33:36,296
比如说

929
00:33:36,296 --> 00:33:38,603
我只允许我丹田域名的脚本加载

930
00:33:38,603 --> 00:33:40,942
我就不允许那些内联的脚本加载

931
00:33:41,038 --> 00:33:43,057
你搞一个内联脚本去加载他

932
00:33:43,057 --> 00:33:44,787
他直接就不会执行这种

933
00:33:45,748 --> 00:33:46,517
哦

934
00:33:46,677 --> 00:33:48,760
反正我是知道有一个三个字母来着

935
00:33:48,760 --> 00:33:49,561
是可以处理

936
00:33:49,561 --> 00:33:52,252
但是我不知道他具体是什么什么情况

937
00:33:52,701 --> 00:33:53,982
嗯行好

938
00:33:54,751 --> 00:33:56,738
行那就这样吧

939
00:33:57,058 --> 00:34:00,454
嗯好嗯好对然后

940
00:34:01,287 --> 00:34:03,947
总结一下就是说你这个项目做的很多

941
00:34:03,947 --> 00:34:06,221
其实这些都很好对

942
00:34:06,221 --> 00:34:09,906
但是有一些基础就了解的不太不太够

943
00:34:10,579 --> 00:34:11,348
嗯

944
00:34:11,540 --> 00:34:14,872
而且我感觉什么这个这个强缓存呀

945
00:34:15,193 --> 00:34:17,660
协协商缓存之类的好多东西呃

946
00:34:17,660 --> 00:34:18,653
之前都没有听说过

947
00:34:18,653 --> 00:34:19,518
而且在

948
00:34:20,383 --> 00:34:22,209
确实没咋听说过对

949
00:34:22,209 --> 00:34:23,266
你现在才大二吗

950
00:34:23,266 --> 00:34:25,349
你现在大二没听说过很正常

951
00:34:25,381 --> 00:34:27,400
其实你现在可以去怎么说

952
00:34:27,400 --> 00:34:28,809
一边去做这些项目

953
00:34:28,809 --> 00:34:30,443
然后把这些就是代码

954
00:34:30,443 --> 00:34:32,750
就是多瞧瞧其实你代码做的还挺多

955
00:34:32,846 --> 00:34:35,121
然后另一方面就是把一些

956
00:34:36,082 --> 00:34:37,748
八拱然后看一看对

957
00:34:37,748 --> 00:34:39,767
强缓存和显然缓存这个怎么说

958
00:34:39,767 --> 00:34:42,490
这个他除了是八拱他其实在我们的

959
00:34:42,811 --> 00:34:47,360
嗯工作中他这个也是很重要的啊好

960
00:34:47,360 --> 00:34:50,340
对还有刚才的那个为他的依赖预加载

961
00:34:50,756 --> 00:34:51,878
嗯对

962
00:34:51,878 --> 00:34:53,127
然后你刚才那个脚手架

963
00:34:53,127 --> 00:34:55,114
都是使用 vite 去搭建的

964
00:34:55,114 --> 00:34:57,677
这个文档肯定要多过几遍

965
00:34:58,542 --> 00:35:00,561
嗯行对

966
00:35:00,657 --> 00:35:02,355
然后还有刚才那个 gwt

967
00:35:02,355 --> 00:35:03,733
这个也要看一看

968
00:35:04,534 --> 00:35:05,238
嗯好啊

969
00:35:05,238 --> 00:35:05,911
就是有点忘了

970
00:35:05,911 --> 00:35:07,481
这个 node 确实是有点忘啊

971
00:35:08,186 --> 00:35:11,839
行好那就先这样吧，嗯好嗯

972
00:35:11,839 --> 00:35:14,370
好的拜拜，ok 拜拜

